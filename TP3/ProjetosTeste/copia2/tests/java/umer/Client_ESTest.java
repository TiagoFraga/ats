package umer;/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 19 10:01:49 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.ArrayList;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Client_ESTest extends Client_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client((String) null, (String) null, "L6q@aV", "L6q@aV", localDate0);
      Point2D.Double point2D_Double0 = client0.getPosition();
      Point2D.Double point2D_Double1 = new Point2D.Double((-1), 0.0);
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double1, (Double) (-1.0), (Double) point2D_Double1.y, localDate0, "L6q@aV", (String) null, "", (-1), (-1), point2D_Double1, (-1.0), 0.0, 0.0);
      client0.addTrip(trip0);
      assertEquals(1.0, client0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1537L);
      Client client0 = new Client("PAc'!gI&G-6=DQDlk", "tEufm_;6z", "PAc'!gI&G-6=DQDlk", "PAc'!gI&G-6=DQDlk", localDate0);
      Point2D.Double point2D_Double0 = client0.getPosition();
      Double double0 = new Double((-197.0753));
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, double0, localDate0, "", "vH/2qd]0RYz", (String) null, 0, (-3184.9017417), point2D_Double0, (-1246.15588293368), 1537L, 2879.358715515);
      client0.addTrip(trip0);
      assertEquals((-98), client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1537L);
      Client client0 = new Client("PAc'!gI&G-6=DQDlk", "tEufm_;6z", "PAc'!gI&G-6=DQDlk", "PAc'!gI&G-6=DQDlk", localDate0);
      boolean boolean0 = client0.isPremium();
      assertEquals(0, client0.getPoints());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("FWT+cP?(2{M", (String) null, "FWT+cP?(2{M", "", localDate0);
      client0.setQueue("FWT+cP?(2{M");
      client0.getQueue();
      assertEquals(0, client0.getPoints());
      assertFalse(client0.isPremium());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Client client0 = new Client("f${B", "", "f${B", "EjJ:j7Exm\"+?|&>M[cD", localDate0);
      client0.setQueue("");
      client0.getQueue();
      assertEquals(0, client0.getPoints());
      assertFalse(client0.isPremium());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Trip trip0 = new Trip();
      LocalDate localDate0 = trip0.getDate();
      Client client0 = new Client("m:", "\nN\u00FAmero de classifica\u00E7\u00F5es : ", "m:", "m:", localDate0);
      int int0 = client0.getPoints();
      assertFalse(client0.isPremium());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getStart();
      Client client0 = new Client((String) null, "'Y", "", "aQf'B`iwq33Vx/SQ2^)", localDate0);
      ArrayList<Trip> arrayList0 = client0.getTrips();
      Client client1 = new Client("", "aQf'B`iwq33Vx/SQ2^)", "aQf'B`iwq33Vx/SQ2^)", (String) null, localDate0, point2D_Double0, (-4392.47994776), arrayList0, (-3043), 0.0, true, "'Y");
      int int0 = client1.getPoints();
      assertTrue(client1.isPremium());
      assertEquals((-3043), int0);
      assertFalse(client0.isPremium());
      assertEquals(0, client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("f${B", "f${B", "f${B", "f${B", localDate0);
      client0.setPoints((-4));
      client0.clone();
      assertEquals((-4), client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client((String) null, (String) null, "L6q@aV", "L6q@aV", localDate0);
      Point2D.Double point2D_Double0 = client0.getPosition();
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) (-1.0), (Double) point2D_Double0.x, localDate0, "L6q@aV", (String) null, "", (-1), (-1), point2D_Double0, (-1.0), 0.0, 0.0);
      client0.addTrip(trip0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      Client client1 = client0.clone();
      assertEquals(0.0, client1.getMoney(), 0.01);
      assertFalse(client1.isPremium());
      assertEquals(0, client1.getPoints());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(5, 5);
      Point2D.Double point2D_Double0 = new Point2D.Double(5, 1066.249);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("Y<%b=v);Ra", "cOWn`lj,?r^h!C%", "Y<%b=v);Ra", "", localDate0, point2D_Double0, 4648.629899392, arrayList0, 1696, 1696, true, "Y<%b=v);Ra");
      Client client1 = client0.clone();
      assertEquals(1696, client0.getPoints());
      assertTrue(client1.isPremium());
      assertEquals(1696, client1.getPoints());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Point2D.Double point2D_Double0 = new Point2D.Double((-19L), (-19L));
      LinkedList<Trip> linkedList0 = new LinkedList<Trip>();
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>(linkedList0);
      Client client0 = new Client("umer.Client", "umer.Client", "umer.Client", "umer.Client", localDate0, point2D_Double0, (-19.0), arrayList0, 0, (-19L), true, "umer.Client");
      Client client1 = client0.clone();
      assertEquals(0, client1.getPoints());
      assertTrue(client1.isPremium());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Point2D.Double point2D_Double0 = new Point2D.Double((-1.0), 0L);
      LinkedList<Trip> linkedList0 = new LinkedList<Trip>();
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>(linkedList0);
      Client client0 = new Client("umer.Client", "umer.Client", "\nPre\u00E7o estimado : ", ";qE)%XG1^|C<|rs0/e", localDate0, point2D_Double0, 1437.0, arrayList0, 0, (-1.0), false, "umer.Client");
      // Undeclared exception!
      try { 
        client0.setPosition((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client((String) null, (String) null, (String) null, (String) null, localDate0);
      // Undeclared exception!
      try { 
        client0.addTrip((Trip) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Period period0 = Period.ofMonths((-2171));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = null;
      try {
        client0 = new Client("", (String) null, "", "\u0003o", localDate0, (Point2D.Double) null, (-1.0), arrayList0, 0, (-1387.894154), true, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Client client0 = null;
      try {
        client0 = new Client(")\nData : ", ")\nData : ", ")\nData : ", ")\nData : ", (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("", "", "", "", localDate0, point2D_Double0, 0.0, arrayList0, 0, 0.0, true, "");
      boolean boolean0 = client0.isPremium();
      assertTrue(boolean0);
      assertEquals(0, client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client((String) null, "'Y", "", "aQf'B`iwq33Vx/SQ2^)", localDate0);
      Client client1 = new Client(client0);
      assertFalse(client1.isPremium());
      assertEquals(0, client1.getPoints());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(5, 5);
      Point2D.Double point2D_Double0 = new Point2D.Double(5, 1066.249);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("Y<%b=v);Ra", "cOWn`lj,?r^h!C%", "Y<%b=v);Ra", "", localDate0, point2D_Double0, 4648.629899392, arrayList0, 1696, 1696, true, "Y<%b=v);Ra");
      int int0 = client0.getPoints();
      assertEquals(1696, int0);
      assertTrue(client0.isPremium());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client((String) null, "NKcI-H'f", "NKcI-H'f", (String) null, localDate0);
      assertFalse(client0.isPremium());
      
      client0.setPremium(true);
      assertTrue(client0.isPremium());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(5, 5);
      Point2D.Double point2D_Double0 = new Point2D.Double(5, 1066.249);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("Y<%b=v);Ra", "cOWn`lj,?r^h!C%", "Y<%b=v);Ra", "", localDate0, point2D_Double0, 4648.629899392, arrayList0, 1696, 1696, true, "Y<%b=v);Ra");
      String string0 = client0.toString();
      assertEquals("Utilizador - cOWn`lj,?r^h!C%\neMail : Y<%b=v);Ra\nPassword : Y<%b=v);Ra\nMorada : \nData de nascimento : 0005-01-05\nDist\u00E2ncia Total : 4648.629899392\nDinheiro gasto/ganho : 1696.0\nN\u00FAmero de viagens :0\nPosi\u00E7\u00E3o : (0.0,0.0)\nPontos : 1696\nPremium : true\nFila de espera : null", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client((String) null, "NKcI-H'f", "NKcI-H'f", (String) null, localDate0);
      Trip trip0 = new Trip();
      client0.addTrip(trip0);
      // Undeclared exception!
      try { 
        client0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Client client0 = null;
      try {
        client0 = new Client();
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Point2D.Double point2D_Double0 = new Point2D.Double((-9L), (-9L));
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("C6`+Len`", "C6`+Len`", "C6`+Len`", "C6`+Len`", localDate0, point2D_Double0, (-9L), arrayList0, 0, (-9L), false, "C6`+Len`");
      client0.setPosition(point2D_Double0);
      assertFalse(client0.isPremium());
      assertEquals(0, client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Client client0 = null;
      try {
        client0 = new Client((Client) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("FWT+cP?(2{M", (String) null, "FWT+cP?(2{M", "", localDate0);
      client0.getQueue();
      assertEquals(0, client0.getPoints());
      assertFalse(client0.isPremium());
  }
}
