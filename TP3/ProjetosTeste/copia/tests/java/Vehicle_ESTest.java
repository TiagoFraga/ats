/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 19 09:58:54 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vehicle_ESTest extends Vehicle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("", 0.0, point2D_Double0, "");
      Point2D.Double point2D_Double1 = new Point2D.Double(0.0, 0.0);
      van0.addClient("*xvM", point2D_Double1, point2D_Double0);
      assertEquals(9, van0.getSeats());
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(1.9, van0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("tWyH1B", 392.9142107284, point2D_Double0, "Eq-~ nbgD");
      bike0.setPosition(point2D_Double0);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1911.899344, 0.0);
      Van van0 = new Van("Fila de espera vazia.", 1268.14405, point2D_Double0, "\nPosi\u00E7\u00E3o : (");
      van0.setAvailable(false);
      boolean boolean0 = van0.isAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1911.899344, 0.0);
      Van van0 = new Van("Fila de espera vazia.", 1268.14405, point2D_Double0, "\nPosi\u00E7\u00E3o : (");
      van0.setSpeed(0.0);
      double double0 = van0.getSpeed();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getStart();
      Bike bike0 = new Bike("*", 1815.725, point2D_Double0, "*");
      bike0.setSpeed((-4021.951276985963));
      double double0 = bike0.getSpeed();
      assertEquals((-4021.951276985963), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(2358.602499, 2358.602499);
      Van van0 = new Van("^1[kMTc}AmY#v1Ua", 2358.602499, point2D_Double0, "**");
      van0.setReliable(0.0);
      double double0 = van0.getReliable();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1218.598377307662, (-943.5242626804154));
      Car car0 = new Car("%KcvQsaHOFo]f", (-836.1019634874523), point2D_Double0, "%KcvQsaHOFo]f");
      double double0 = car0.getReliable();
      assertEquals(4, car0.getSeats());
      assertEquals((-836.1019634874523), double0, 0.01);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1911.899344, 0.0);
      Van van0 = new Van("Fila de espera vazia.", 1268.14405, point2D_Double0, "\nPosi\u00E7\u00E3o : (");
      van0.setPrice(0.0);
      double double0 = van0.getPrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("Helicopter", 736.38242, point2D_Double0, "9+ Y#?C");
      helicopter0.setPrice((-217.18569008435));
      double double0 = helicopter0.getPrice();
      assertEquals((-217.18569008435), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0, 55.0);
      Van van0 = new Van("{hm(=cT\"?", 1.0, point2D_Double0, "EKS>");
      van0.getOwner();
      assertEquals(9, van0.getSeats());
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(55.0, van0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("", 3537.623333668, point2D_Double0, "");
      bike0.getOwner();
      assertEquals(1, bike0.getSeats());
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(0.9, bike0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car(",0 F", 390.10124312, point2D_Double0, ",0 F");
      car0.getLicencePlate();
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(1.5, car0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Bike bike0 = new Bike("", 0.0, point2D_Double0, "");
      bike0.getLicencePlate();
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("h:", (-5108.4), point2D_Double0, "rgJ1R");
      bike0.equals((Vehicle) bike0);
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(1, bike0.getSeats());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("", 0.0, point2D_Double0, "BxHv]2tN@");
      Bike bike0 = new Bike("\nMatr\u00EDcula ve\u00EDculo : ", (-5768.98), point2D_Double0, (String) null);
      boolean boolean0 = helicopter0.equals((Vehicle) bike0);
      assertFalse(boolean0);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(1, bike0.getSeats());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0, 1.0);
      Bike bike0 = new Bike(",xJCf[KtYj+o%%W<", 0.0, point2D_Double0, ",xJCf[KtYj+o%%W<");
      Vehicle vehicle0 = bike0.clone();
      assertEquals(0.0, bike0.getReliable(), 0.01);
      assertEquals(1, vehicle0.getSeats());
      assertEquals(75.0, vehicle0.getSpeed(), 0.01);
      assertEquals(0.9, vehicle0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0, 0.9);
      Car car0 = new Car("1EGfO,(,bgEb,V@8sz-", (-1377.0954742), point2D_Double0, "1EGfO,(,bgEb,V@8sz-");
      Vehicle vehicle0 = car0.clone();
      assertEquals((-1377.0954742), car0.getReliable(), 0.01);
      assertEquals(1.5, vehicle0.getPrice(), 0.01);
      assertEquals(4, vehicle0.getSeats());
      assertEquals(65.0, vehicle0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("imFoDdZ~9)y}n^v]", 0.0, point2D_Double0, "f!#%6(JG?tgfHd$mz.");
      ArrayList<Trip> arrayList0 = car0.getTrips();
      Trip trip0 = new Trip();
      arrayList0.add(trip0);
      // Undeclared exception!
      try { 
        car0.setTrips(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("", 1.9, point2D_Double0, "");
      // Undeclared exception!
      try { 
        car0.addTrip((Trip) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(330.247421633, 330.247421633);
      Car car0 = new Car((String) null, 330.247421633, point2D_Double0, "VJx'%?S!H</ZzB}6I");
      // Undeclared exception!
      try { 
        car0.addClient("YO:", point2D_Double0, (Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("", 3537.623333668, point2D_Double0, "");
      String string0 = bike0.printQueue();
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(1, bike0.getSeats());
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals("Fila de espera vazia.", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("Fila de espera vazia.", 1268.14405, point2D_Double0, "\nPosi\u00E7\u00E3o : (");
      van0.addClient("", point2D_Double0, point2D_Double0);
      String string0 = van0.printQueue();
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals("1\u00BA lugar :\n", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getStart();
      Helicopter helicopter0 = new Helicopter("Helicopter", 736.38242, point2D_Double0, "9+ Y#?C");
      helicopter0.setTrips((ArrayList<Trip>) null);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1242.4228134378), 2555.102007196729);
      Bike bike0 = new Bike((String) null, 2555.102007196729, point2D_Double0, (String) null);
      HashMap<String, ArrayList<Point2D.Double>> hashMap0 = bike0.getQueueInfo();
      ArrayList<Point2D.Double> arrayList0 = new ArrayList<Point2D.Double>();
      hashMap0.put((String) null, arrayList0);
      bike0.setQueueInfo(hashMap0);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(1, bike0.getSeats());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0, 1.0);
      Van van0 = new Van("\nTempo real at\u00E9 ao cliente : ", 1.0, point2D_Double0, "\nTempo real at\u00E9 ao cliente : ");
      van0.setQueueInfo((HashMap<String, ArrayList<Point2D.Double>>) null);
      assertEquals(9, van0.getSeats());
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(55.0, van0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("#9{}", (-2528.698784), point2D_Double0, "#9{}");
      car0.setQueue((LinkedList<String>) null);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("", 2304.819553, point2D_Double0, "");
      ArrayList<Trip> arrayList0 = van0.getTrips();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 65.0, localDate0, "", "Fila de espera vazia.", "", 0, (-1253.7230186805), point2D_Double0, 0.0, 65.0, 65.0);
      arrayList0.add(trip0);
      van0.setTrips(arrayList0);
      ArrayList<Trip> arrayList1 = van0.getTrips();
      assertEquals(9, van0.getSeats());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(55.0, van0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0, 55.0);
      Van van0 = new Van("{hm(=cT\"?", 1.0, point2D_Double0, "EKS>");
      van0.addClient("OW?[1", point2D_Double0, point2D_Double0);
      HashMap<String, ArrayList<Point2D.Double>> hashMap0 = (HashMap<String, ArrayList<Point2D.Double>>)van0.getQueueInfo();
      van0.setQueueInfo(hashMap0);
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(1, hashMap0.size());
      assertEquals(9, van0.getSeats());
      assertEquals(1.9, van0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-999.8838532182), (-2240.3889497));
      Helicopter helicopter0 = new Helicopter((String) null, (-2240.3889497), point2D_Double0, "[GE8=8-70u!s");
      helicopter0.addClient("", point2D_Double0, point2D_Double0);
      LinkedList<String> linkedList0 = helicopter0.getQueue();
      helicopter0.setQueue(linkedList0);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertTrue(linkedList0.contains(""));
      assertEquals(3, helicopter0.getSeats());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-999.8838532182), (-2240.3889497));
      Helicopter helicopter0 = new Helicopter((String) null, (-2240.3889497), point2D_Double0, "[GE8=8-70u!s");
      LinkedList<String> linkedList0 = helicopter0.getQueue();
      helicopter0.setQueue(linkedList0);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0, 1.0);
      Bike bike0 = new Bike(",xJCf[KtYj+o%%W<", 0.0, point2D_Double0, ",xJCf[KtYj+o%%W<");
      bike0.isAvailable();
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(1, bike0.getSeats());
      assertEquals(75.0, bike0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("", 2304.819553, point2D_Double0, "");
      van0.getPosition();
      assertEquals(9, van0.getSeats());
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(1.9, van0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0, 0.9);
      Van van0 = new Van("W@fA^pK4[Tz.8e:", (-1529.69004), point2D_Double0, "1EGfO,(,bgEb,V@8sz-");
      van0.setSeats((-1406));
      int int0 = van0.getSeats();
      assertEquals((-1406), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van((String) null, 0.0, point2D_Double0, (String) null);
      van0.getLicencePlate();
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(9, van0.getSeats());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getStart();
      Bike bike0 = new Bike("", 1815.725, point2D_Double0, "");
      double double0 = bike0.getReliable();
      assertEquals(1, bike0.getSeats());
      assertEquals(1815.725, double0, 0.01);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(0.9, bike0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getStart();
      Bike bike0 = new Bike("", 1815.725, point2D_Double0, "");
      int int0 = bike0.moneyGeneratedBetween((LocalDate) null, (LocalDate) null);
      assertEquals(1, bike0.getSeats());
      assertEquals(0, int0);
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car(",0 F", 390.10124312, point2D_Double0, ",0 F");
      car0.addClient(",0 F", point2D_Double0, point2D_Double0);
      String string0 = car0.toString();
      assertEquals("Tipo : class Car\nMatricula : ,0 F\nVelocidade m\u00E9dia por km : 65.0\nPre\u00E7o m\u00E9dio por km : 1.5\nFator de fiabilidade : 390.10124312\nDisponibilidade : true\nNumero de lugares: 4\nPosi\u00E7\u00E3o : (0.0,0.0)\nOwner : ,0 F\n---------\nFila de Espera : \n1\u00BA lugar :,0 F\n\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car(",0 F", 390.10124312, point2D_Double0, ",0 F");
      car0.addClient(",0 F", point2D_Double0, point2D_Double0);
      Vehicle vehicle0 = car0.clone();
      assertEquals(65.0, vehicle0.getSpeed(), 0.01);
      assertEquals(1.5, vehicle0.getPrice(), 0.01);
      assertEquals(4, vehicle0.getSeats());
      assertEquals(390.10124312, car0.getReliable(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car(",0 F", 390.10124312, point2D_Double0, ",0 F");
      car0.setLicencePlate(",0 F");
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("Helicopter", 736.38242, point2D_Double0, "9+ Y#?C");
      double double0 = helicopter0.getPrice();
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(8.5, double0, 0.01);
      assertEquals(3, helicopter0.getSeats());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("", 3537.623333668, point2D_Double0, "");
      int int0 = helicopter0.getSeats();
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, int0);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("Fila de espera vazia.", 1268.14405, point2D_Double0, "\nPosi\u00E7\u00E3o : (");
      van0.removeClient("Fila de espera vazia.");
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(55.0, van0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car(",0 F", 390.10124312, point2D_Double0, ",0 F");
      car0.setOwner(",0 F");
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("", 3537.623333668, point2D_Double0, "");
      // Undeclared exception!
      try { 
        helicopter0.setPosition((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("Fila de espera vazia.", 1268.14405, point2D_Double0, "\nPosi\u00E7\u00E3o : (");
      double double0 = van0.getSpeed();
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(55.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1242.4228134378), 2555.102007196729);
      Bike bike0 = new Bike((String) null, 2555.102007196729, point2D_Double0, (String) null);
      // Undeclared exception!
      try { 
        bike0.equals((Vehicle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car(",0 F", 390.10124312, point2D_Double0, ",0 F");
      Trip trip0 = new Trip();
      car0.addTrip(trip0);
      // Undeclared exception!
      try { 
        car0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1242.4228134378), 2555.102007196729);
      Bike bike0 = new Bike((String) null, 2555.102007196729, point2D_Double0, (String) null);
      bike0.getOwner();
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(1, bike0.getSeats());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Car car0 = null;
      try {
        car0 = new Car();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
