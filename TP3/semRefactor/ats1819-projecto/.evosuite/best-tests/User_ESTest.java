/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 19 09:56:16 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Point2D.Double point2D_Double1 = new Point2D.Double(1285.56, (-974.099326277));
      Trip trip0 = new Trip((-669), point2D_Double0, point2D_Double1, (Double) point2D_Double0.y, (Double) point2D_Double0.x, localDate0, "(bHPld~!O[;hc8<hrw", "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\nDinheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o : 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", "R|", 109, 0.0, point2D_Double1, 1285.56, 0.0, 1971.1453);
      Client client0 = new Client("(bHPld~!O[;hc8<hrw", "vQ7F#[a=PSv>]a:", "~VBS%vlh^yJ", "s}l-D", localDate0);
      client0.addTrip(trip0);
      assertEquals(1612.9271561522253, client0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Period period0 = Period.of(0, 0, (-1142));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Client client0 = new Client("cw]i|L$O", "cw]i|L$O", "cw]i|L$O", "(z'Ui'|E7,du772", localDate0);
      Trip trip0 = new Trip();
      client0.addTrip(trip0);
      assertEquals(0.0, client0.getMoney(), 0.01);
      assertEquals("cw]i|L$O", client0.getEmail());
      assertEquals("cw]i|L$O", client0.getPassword());
      assertEquals(0.0, client0.getTotalDistance(), 0.01);
      assertEquals("cw]i|L$O", client0.getName());
      assertEquals("(z'Ui'|E7,du772", client0.getAddress());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Boolean boolean0 = Boolean.FALSE;
      Driver driver0 = new Driver("7!XMSnS'JKa", "7!XMSnS'JKa", "VBoU|xHGx:LIg6Z", "VBoU|xHGx:LIg6Z", localDate0, 0L, 2323.0248, boolean0, 1344.0, (ArrayList<Trip>) null, 2092, 0.0, (-630.6647), "NQDdyD#'", "NQDdyD#'", (-630.6647));
      String string0 = driver0.toString();
      assertEquals("umer.Driver \nUtilizador - 7!XMSnS'JKa\neMail : 7!XMSnS'JKa\nPassword : VBoU|xHGx:LIg6Z\nMorada : VBoU|xHGx:LIg6Z\nData de nascimento : 1970-01-01\nDist\u00E2ncia Total : 0.0\nDinheiro gasto/ganho : 0.0\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o : 2323.0248\nGrau de cumprimento : 1344.0\nN\u00FAmero de classifica\u00E7\u00F5es : 2092\nVe\u00EDculo : NQDdyD#'\nDesvio total : -630.6647\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Driver driver0 = new Driver((String) null, (String) null, (String) null, "/TRfF", localDate0, 2326.4139637685876, "");
      Point2D.Double point2D_Double0 = new Point2D.Double(2326.4139637685876, 2326.4139637685876);
      Trip trip0 = new Trip(2016, point2D_Double0, point2D_Double0, (Double) 2326.4139637685876, (Double) point2D_Double0.y, localDate0, "", (String) null, "", 934, 2016, point2D_Double0, 647.87, (-3402.0), 2326.4139637685876);
      driver0.addTrip(trip0);
      driver0.getTrips();
      assertEquals(2326.4139637685876, driver0.getMoney(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Period period0 = Period.of((-2325), (-2325), (-2325));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Boolean boolean0 = Boolean.TRUE;
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Driver driver0 = new Driver("Utilizador - ", "Utilizador - ", "Utilizador - ", "\u0003H8^,A", localDate0, 94.5281985, 448.973672586, boolean0, (-724.0752473531), arrayList0, 90, 3038.27177539634, 448.973672586, "\u0003H8^,A", "\nVe\u00EDculo : ", (-724.0752473531));
      double double0 = driver0.getTotalDistance();
      assertEquals("Utilizador - ", driver0.getEmail());
      assertEquals("Utilizador - ", driver0.getPassword());
      assertEquals(3038.27177539634, driver0.getMoney(), 0.01);
      assertEquals(94.5281985, double0, 0.01);
      assertEquals("Utilizador - ", driver0.getName());
      assertEquals("\u0003H8^,A", driver0.getAddress());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Driver driver0 = new Driver((String) null, (String) null, (String) null, "/TRfF", localDate0, 2326.4139637685876, "");
      String string0 = driver0.getPassword();
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      Point2D.Double point2D_Double0 = new Point2D.Double(289.58704415427, 0.0);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("_!][Wn1~`pDACU.", "_!][Wn1~`pDACU.", "", "", localDate0, point2D_Double0, 0.0, arrayList0, (-3477), (-2611.504047355427), false, "ExycL");
      String string0 = client0.getPassword();
      assertEquals((-2611.504047355427), client0.getMoney(), 0.01);
      assertEquals("", string0);
      assertEquals(0.0, client0.getTotalDistance(), 0.01);
      assertEquals("_!][Wn1~`pDACU.", client0.getEmail());
      assertEquals("_!][Wn1~`pDACU.", client0.getName());
      assertEquals("", client0.getAddress());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Driver driver0 = new Driver("\nVe\u00EDculo : ", "\nVe\u00EDculo : ", "g|6]}bk2V[,Z,oahS", "g|6]}bk2V[,Z,oahS", localDate0, (-318.58159), "g|6]}bk2V[,Z,oahS");
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "g|6]}bk2V[,Z,oahS", "[~cK", "\nVe\u00EDculo : ", 0, 495.36316, point2D_Double0, 495.36316, (-867.99396027867), 495.36316);
      driver0.addTrip(trip0);
      driver0.getNumberOfTrips();
      assertEquals("g|6]}bk2V[,Z,oahS", driver0.getAddress());
      assertEquals("\nVe\u00EDculo : ", driver0.getName());
      assertEquals("\nVe\u00EDculo : ", driver0.getEmail());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals("g|6]}bk2V[,Z,oahS", driver0.getPassword());
      assertEquals(0.0, driver0.getMoney(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      Driver driver0 = new Driver("umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o : 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", (String) null, (String) null, "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o : 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", localDate0, (-49), "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o : 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n");
      String string0 = driver0.getName();
      assertNull(string0);
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0.0, driver0.getMoney(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Driver driver0 = new Driver("", "", "Jgs+VkT`5$u:UKMg", "", localDate0, 594.850157304176, "Jgs+VkT`5$u:UKMg");
      String string0 = driver0.getName();
      assertEquals("Jgs+VkT`5$u:UKMg", driver0.getPassword());
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals("", string0);
      assertEquals("", driver0.getAddress());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals("", driver0.getEmail());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Period period0 = Period.ofDays((-1602));
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      Driver driver0 = new Driver("\nEmail condutor : ", "\nEmail condutor : ", "\nEmail condutor : ", "\nEmail condutor : ", localDate0, (-374.870652063), "");
      double double0 = driver0.getMoney();
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Double double0 = new Double(1);
      Month month0 = Month.JULY;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, double0, localDate0, (String) null, "\nEmail cliente : ", "umer.Driver", 1, 0.0, point2D_Double0, 0.0, 0.0, 0.0);
      Driver driver0 = new Driver("", (String) null, "", "\nDist\u00E2ncia Total : ", localDate0, 0.0, (String) null);
      driver0.addTrip(trip0);
      double double1 = driver0.getMoney();
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Month month0 = Month.JULY;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      Driver driver0 = new Driver("", (String) null, "", "\nDist\u00E2ncia Total : ", localDate0, 0.0, (String) null);
      assertEquals("", driver0.getEmail());
      
      driver0.setEmail((String) null);
      driver0.getEmail();
      assertEquals("\nDist\u00E2ncia Total : ", driver0.getAddress());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals("", driver0.getPassword());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Month month0 = Month.JULY;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      Driver driver0 = new Driver("", (String) null, "", "\nDist\u00E2ncia Total : ", localDate0, 0.0, (String) null);
      String string0 = driver0.getEmail();
      assertEquals("", driver0.getPassword());
      assertEquals("", string0);
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertNotNull(string0);
      assertEquals("\nDist\u00E2ncia Total : ", driver0.getAddress());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDate localDate0 = MockLocalDate.of((-557), month0, 25);
      Driver driver0 = new Driver((String) null, (String) null, (String) null, (String) null, localDate0, (-1054.9929284544), (String) null);
      driver0.getAddress();
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0.0, driver0.getMoney(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Boolean boolean0 = Boolean.FALSE;
      Driver driver0 = new Driver("uK|`rPcj&&yh_1g#j", "N/u#m&GOXIjYg?", "c(na", "c(na", localDate0, (-692.3), "");
      ArrayList<Trip> arrayList0 = driver0.getTrips();
      Driver driver1 = new Driver("", "", "\nN\u00FAmero de viagens :", "", localDate0, 3343.6980509, 2383.38192, boolean0, 3343.6980509, arrayList0, 1, 1, (-1.0), "uK|`rPcj&&yh_1g#j", "yJNqS&+ekI*:z`K", (-2193.48091303));
      String string0 = driver1.getAddress();
      assertEquals("c(na", driver0.getAddress());
      assertEquals("", string0);
      assertEquals("N/u#m&GOXIjYg?", driver0.getName());
      assertEquals(3343.6980509, driver1.getTotalDistance(), 0.01);
      assertEquals("\nN\u00FAmero de viagens :", driver1.getPassword());
      assertEquals(1.0, driver1.getMoney(), 0.01);
      assertEquals("uK|`rPcj&&yh_1g#j", driver0.getEmail());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-147L));
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 981.63);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("8Z+e\"3d![,=(G(K75X", "\nPre\u00E7o estimado : ", "", "", localDate0, point2D_Double0, (-147L), arrayList0, (-3054), 1.0, false, "wI:YMMShh$`y[TJ4WU");
      Driver driver0 = new Driver("z5", "", (String) null, "<;\"[qq8vZ\"UAuh3o", localDate0, (-147L), "\"Wnr7DFgn7Y");
      boolean boolean0 = client0.equals((User) driver0);
      assertEquals("\nPre\u00E7o estimado : ", client0.getName());
      assertFalse(boolean0);
      assertEquals("<;\"[qq8vZ\"UAuh3o", driver0.getAddress());
      assertEquals(1.0, client0.getMoney(), 0.01);
      assertEquals("8Z+e\"3d![,=(G(K75X", client0.getEmail());
      assertEquals((-147.0), client0.getTotalDistance(), 0.01);
      assertEquals("", client0.getPassword());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1816L));
      Boolean boolean0 = Boolean.valueOf(true);
      Driver driver0 = new Driver("", "\nGrau de cumprimento : ", (String) null, "I=T?R-FKnB#]a$+", localDate0, (-1816L), 1974.334, boolean0, 1285.0, (ArrayList<Trip>) null, 1408, (-4962.6), 0.0, "Qe", (String) null, 0.0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, (String) null, "Qe", (String) null, (-1), (-368.10358), point2D_Double0, 0.0, 0.0, (-368.10358));
      driver0.addTrip(trip0);
      User user0 = driver0.clone();
      assertEquals("\nGrau de cumprimento : ", user0.getName());
      assertEquals("I=T?R-FKnB#]a$+", user0.getAddress());
      assertEquals((-4962.6), driver0.getMoney(), 0.01);
      assertEquals("", user0.getEmail());
      assertEquals((-1816.0), driver0.getTotalDistance(), 0.01);
      assertEquals(1, user0.getNumberOfTrips());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Driver driver0 = new Driver("n", "n", "n", "n", localDate0, 0.0, "Bu3D)>!uZOq~");
      driver0.clone();
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Boolean boolean0 = Boolean.valueOf("j;N6YWR_=O");
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Driver driver0 = new Driver("j;N6YWR_=O", "WC/O;/;v i", "|Lf0-\";QPxC(QWJ^", "]zs <", localDate0, 577.3, 0.0, boolean0, 1943.5047805, arrayList0, 1676, 577.3, (-974.099326277), "]zs <", "\nDist\u00E2ncia Total : ", 577.3);
      User user0 = driver0.clone();
      assertEquals("WC/O;/;v i", user0.getName());
      assertEquals("|Lf0-\";QPxC(QWJ^", user0.getPassword());
      assertEquals("j;N6YWR_=O", user0.getEmail());
      assertEquals(577.3, driver0.getMoney(), 0.01);
      assertEquals("]zs <", user0.getAddress());
      assertEquals(577.3, driver0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Boolean boolean0 = new Boolean(false);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Driver driver0 = new Driver("", "", "\nDura\u00E7\u00E3o prevista : ", "\nDura\u00E7\u00E3o prevista : ", localDate0, 0.0, (-709.38961), boolean0, 0.0, arrayList0, (-2080), (-2080), 1445.3412376821314, "", "s)7IM/e.K:", 0.0);
      // Undeclared exception!
      try { 
        driver0.setBirthday((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("", "", "", "n", localDate0);
      // Undeclared exception!
      try { 
        client0.addTrip((Trip) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Driver driver0 = new Driver("uK|`rPcj&&yh_1g#j", "N/u#m&GOXIjYg?", "c(na", "c(na", localDate0, (-692.3), "");
      String string0 = driver0.getAddress();
      assertEquals("c(na", driver0.getPassword());
      assertEquals("N/u#m&GOXIjYg?", driver0.getName());
      assertEquals("c(na", string0);
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals("uK|`rPcj&&yh_1g#j", driver0.getEmail());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("WkfAr##9g#dkD%/.$", "=KV", "WkfAr##9g#dkD%/.$", "", localDate0);
      double double0 = client0.getTotalDistance();
      assertEquals(0.0, double0, 0.01);
      assertEquals("WkfAr##9g#dkD%/.$", client0.getPassword());
      assertEquals("", client0.getAddress());
      assertEquals("WkfAr##9g#dkD%/.$", client0.getEmail());
      assertEquals("=KV", client0.getName());
      assertEquals(0.0, client0.getMoney(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Driver driver0 = new Driver((String) null, (String) null, (String) null, "/TRfF", localDate0, 2326.4139637685876, "");
      driver0.getBirthday();
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0.0, driver0.getMoney(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Boolean boolean0 = new Boolean(false);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Driver driver0 = new Driver("", "", "\nDura\u00E7\u00E3o prevista : ", "\nDura\u00E7\u00E3o prevista : ", localDate0, 0.0, (-709.38961), boolean0, 0.0, arrayList0, (-2080), (-2080), 1445.3412376821314, "", "s)7IM/e.K:", 0.0);
      String string0 = driver0.getPassword();
      assertEquals("", driver0.getEmail());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals("\nDura\u00E7\u00E3o prevista : ", driver0.getAddress());
      assertEquals("\nDura\u00E7\u00E3o prevista : ", string0);
      assertEquals((-2080.0), driver0.getMoney(), 0.01);
      assertEquals("", driver0.getName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(33L);
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getStart();
      Driver driver0 = new Driver("umer.Driver", "INnLTEzV", "INnLTEzV", "INnLTEzV", localDate0, 0.0, "");
      ArrayList<Trip> arrayList0 = driver0.getTrips();
      Client client0 = new Client("INnLTEzV", "mhV", "mhV", "mhV", localDate0, point2D_Double0, 0.0, arrayList0, 4, (-1143.487811170631), true, "mhV");
      double double0 = client0.getMoney();
      assertEquals("INnLTEzV", client0.getEmail());
      assertEquals(0.0, client0.getTotalDistance(), 0.01);
      assertEquals("mhV", client0.getPassword());
      assertEquals("mhV", client0.getName());
      assertEquals("mhV", client0.getAddress());
      assertEquals((-1143.487811170631), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Boolean boolean0 = Boolean.TRUE;
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Driver driver0 = new Driver("=KV", "=KV", "=KV", "=KV", localDate0, (-2535.209041), (-3396.77), boolean0, (-3396.77), arrayList0, (-1784), 1.0, (-1784), "WkfAr##9g#dkD%/.$", "=KV", 0.0);
      driver0.getEmail();
      assertEquals(1.0, driver0.getMoney(), 0.01);
      assertEquals((-2535.209041), driver0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("WkfAr##9g#dkD%/.$", "=KV", "WkfAr##9g#dkD%/.$", "", localDate0);
      client0.setTotalDistance((-481));
      double double0 = client0.getTotalDistance();
      assertEquals((-481.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      Driver driver0 = new Driver("umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o : 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o : 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o : 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o : 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", localDate0, (-1L), "p.o1(oJ[WwC9<AgZ");
      driver0.getName();
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0.0, driver0.getMoney(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getStart();
      Driver driver0 = new Driver("", "INnLTEzV", "INnLTEzV", "INnLTEzV", localDate0, 0.0, "");
      ArrayList<Trip> arrayList0 = driver0.getTrips();
      arrayList0.add(trip0);
      arrayList0.add(trip0);
      Client client0 = new Client("INnLTEzV", "INnLTEzV", "INnLTEzV", "INnLTEzV", localDate0, point2D_Double0, 0.0, arrayList0, 4, 33L, true, "INnLTEzV");
      ArrayList<String> arrayList1 = client0.getDates();
      assertEquals("INnLTEzV", driver0.getAddress());
      assertEquals(33.0, client0.getMoney(), 0.01);
      assertEquals(0.0, client0.getTotalDistance(), 0.01);
      assertEquals("", driver0.getEmail());
      assertEquals(1, arrayList1.size());
      assertEquals("INnLTEzV", driver0.getName());
      assertEquals("INnLTEzV", driver0.getPassword());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(33L);
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getStart();
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      arrayList0.add((Trip) null);
      Client client0 = new Client("INnLTEzV", "hV", "hV", "hV", localDate0, point2D_Double0, 0.0, arrayList0, 4, 1472.840441331497, true, "hV");
      // Undeclared exception!
      try { 
        client0.getDates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getStart();
      Driver driver0 = new Driver("", "INnLTEzV", "INnLTEzV", "INnLTEzV", localDate0, 0.0, "");
      ArrayList<Trip> arrayList0 = driver0.getTrips();
      Client client0 = new Client("INnLTEzV", "INnLTEzV", "INnLTEzV", "INnLTEzV", localDate0, point2D_Double0, 0.0, arrayList0, 4, 33L, true, "INnLTEzV");
      client0.getDates();
      assertEquals(0.0, client0.getTotalDistance(), 0.01);
      assertEquals("INnLTEzV", driver0.getName());
      assertEquals("INnLTEzV", driver0.getPassword());
      assertEquals("", driver0.getEmail());
      assertEquals("INnLTEzV", driver0.getAddress());
      assertEquals(33.0, client0.getMoney(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3865L);
      Boolean boolean0 = Boolean.valueOf(true);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      arrayList0.add((Trip) null);
      Driver driver0 = new Driver("'b#", "'b#", "k", "8lc^xzivJ;|>4oiG", localDate0, 1555.1375, 2928.093310627415, boolean0, 0.0, arrayList0, 1134, 1134, 0.0, "k", "8lc^xzivJ;|>4oiG", 0.0);
      // Undeclared exception!
      try { 
        driver0.getTrips();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Client client0 = null;
      try {
        client0 = new Client();
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Driver driver0 = new Driver("umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", localDate0, (-1L), "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n");
      driver0.setBirthday(localDate0);
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0.0, driver0.getMoney(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Driver driver0 = new Driver("n", "n", "n", "n", localDate0, 0.0, "Bu3D)>!uZOq~");
      driver0.setMoney(0.0);
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0.0, driver0.getMoney(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Driver driver0 = new Driver("umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", localDate0, (-1L), "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n");
      driver0.setAddress("umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n");
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(1, 1, 1);
      Driver driver0 = new Driver("", "", "", "", localDate0, 0.0, "");
      driver0.getNumberOfTrips();
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3865L);
      Boolean boolean0 = Boolean.valueOf(true);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Driver driver0 = new Driver("'b#", "'b#", "k", "8lc^xzivJ;|>4oiG", localDate0, 1555.1375, 2928.093310627415, boolean0, 0.0, arrayList0, 1134, 1134, 0.0, "k", "8lc^xzivJ;|>4oiG", 0.0);
      assertEquals("'b#", driver0.getName());
      
      driver0.setName("k<%.{o|,");
      assertEquals("8lc^xzivJ;|>4oiG", driver0.getAddress());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Boolean boolean0 = Boolean.FALSE;
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Driver driver0 = new Driver("\nEmail condutor : ", "\nEmail condutor : ", "\nEmail condutor : ", "\nEmail condutor : ", localDate0, 0.0, 0.0, boolean0, 0.0, arrayList0, (-5438), 0.0, (-5438), "\nEmail condutor : ", "\nEmail condutor : ", (-5438));
      driver0.equals((User) driver0);
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0.0, driver0.getMoney(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Driver driver0 = new Driver("umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n", localDate0, (-1L), "umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n");
      driver0.setPassword("umer.Driver \nUtilizador - \nEmail condutor : \neMail : \nEmail condutor : \nPassword : \nEmail condutor : \nMorada : \nEmail condutor : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\ninheiro gasto/ganho : -554.351\nN\u00FAmero de viagens :0\nDisponibilidade : false\nClassifica\u00E7\u00E3o: 0.0\nGrau de cumprimento : 0.0\nN\u00FAmero de classifica\u00E7\u00F5es : -5438\nVe\u00EDculo : +|X^\"'X+'\nDesvio total : -5438.0\n");
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
  }
}
