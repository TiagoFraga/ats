/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 18 18:39:43 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Trip_ESTest extends Trip_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1110), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "%KV(\"", "@h/7tFZK", "@h/7tFZK", (-1110), 0.0, point2D_Double0, 0.0, (-1299.560038), (-1299.560038));
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-1299.560038), trip0.getRealTimeToClient(), 0.01);
      assertEquals("%KV(\"", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1110), trip0.getRating());
      assertEquals("@h/7tFZK", trip0.getDriver());
      assertEquals("@h/7tFZK", trip0.getClient());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1110), trip0.getID());
      assertEquals((-1299.560038), trip0.getEstimatedPrice(), 0.01);
      assertNotNull(trip0);
      
      String string0 = trip0.toString();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-1299.560038), trip0.getRealTimeToClient(), 0.01);
      assertEquals("%KV(\"", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1110), trip0.getRating());
      assertEquals("@h/7tFZK", trip0.getDriver());
      assertEquals("@h/7tFZK", trip0.getClient());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1110), trip0.getID());
      assertEquals((-1299.560038), trip0.getEstimatedPrice(), 0.01);
      assertNotNull(string0);
      assertEquals("Viagem de (0.0,0.0) ---> (0.0,0.0)\nData : 2014-02-14\nDist\u00E2ncia : 0km\nDura\u00E7\u00E3o prevista : 0h:0m:0s\nDura\u00E7\u00E3o real : 0h:0m:0s\nPre\u00E7o : 0\u20AC\nEmail condutor : @h/7tFZK\nEmail cliente : @h/7tFZK\nMatr\u00EDcula ve\u00EDculo : %KV(\"\nClassifica\u00E7\u00E3o : -1110**\nPosi\u00E7\u00E3o inicial do taxi : [0.0,0.0]\nTempo previsto at\u00E9 ao cliente : 0h:0m:0s\nTempo real at\u00E9 ao cliente : -1299h:-34m:-36s\nPre\u00E7o estimado : -1299\u20AC\numer.Trip id : -1110", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.x, localDate0, "", "", "I|-8eh[KF\"[/.@", 0, 0.0, point2D_Double0, (-3929.5), 2649.91, 629.57943);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0, trip0.getID());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(2649.91, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-3929.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(629.57943, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("I|-8eh[KF\"[/.@", trip0.getClient());
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNotNull(trip0);
      
      Double double0 = trip0.getTime();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0, trip0.getID());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(2649.91, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-3929.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(629.57943, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("I|-8eh[KF\"[/.@", trip0.getClient());
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Double double0 = new Double(60.0);
      assertNotNull(double0);
      assertEquals(60.0, (double)double0, 0.01);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1110), point2D_Double0, point2D_Double0, double0, double0, localDate0, "%KV(\"", "@h/7tFZK", "@h/7tFZK", (-1110), 0.0, point2D_Double0, 0.0, (-1299.560038), (-1299.560038));
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-1299.560038), trip0.getRealTimeToClient(), 0.01);
      assertEquals("%KV(\"", trip0.getLicencePlate());
      assertEquals("@h/7tFZK", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(60.0, trip0.getTime(), 0.01);
      assertEquals((-1110), trip0.getRating());
      assertEquals((-1110), trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1299.560038), trip0.getEstimatedPrice(), 0.01);
      assertEquals(60.0, trip0.getPrice(), 0.01);
      assertEquals("@h/7tFZK", trip0.getClient());
      assertNotNull(trip0);
      
      Double double1 = trip0.getTime();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-1299.560038), trip0.getRealTimeToClient(), 0.01);
      assertEquals("%KV(\"", trip0.getLicencePlate());
      assertEquals("@h/7tFZK", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(60.0, trip0.getTime(), 0.01);
      assertEquals((-1110), trip0.getRating());
      assertEquals((-1110), trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1299.560038), trip0.getEstimatedPrice(), 0.01);
      assertEquals(60.0, trip0.getPrice(), 0.01);
      assertEquals("@h/7tFZK", trip0.getClient());
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(60.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Trip trip0 = new Trip();
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0, trip0.getID());
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getRealTimeToClient();
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0, trip0.getID());
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.x, localDate0, "", "", "I|-8eh[KF\"[/.@", 0, 0.0, point2D_Double0, (-3929.5), 2649.91, 629.57943);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(629.57943, trip0.getEstimatedPrice(), 0.01);
      assertEquals("I|-8eh[KF\"[/.@", trip0.getClient());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(2649.91, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-3929.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getRealTimeToClient();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(629.57943, trip0.getEstimatedPrice(), 0.01);
      assertEquals("I|-8eh[KF\"[/.@", trip0.getClient());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(2649.91, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-3929.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(2649.91, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Trip trip0 = new Trip();
      assertNull(trip0.getClient());
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNotNull(trip0);
      
      trip0.setRating(2005);
      assertNull(trip0.getClient());
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(2005, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      
      int int0 = trip0.getRating();
      assertNull(trip0.getClient());
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(2005, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(2005, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0, 0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "ik@+Dz5", (String) null, "", (-1), 0.0, point2D_Double0, 0.0, 0.0, 0.0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("ik@+Dz5", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals((-1), trip0.getRating());
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNotNull(trip0);
      
      int int0 = trip0.getRating();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("ik@+Dz5", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals((-1), trip0.getRating());
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(3919, 3919);
      assertEquals(3919.0, point2D_Double0.y, 0.01);
      assertEquals(3919.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.of(3919, (-2516), (-1));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(3919, point2D_Double0, point2D_Double0, (Double) 3919.0, (Double) point2D_Double0.x, localDate0, "a`|'6GM5A&q#=", "km", "a`|'6GM5A&q#=", (-1), (-2516), point2D_Double0, (-128.992), 3919.0, (-1922.0533928044363));
      assertEquals(3919.0, point2D_Double0.y, 0.01);
      assertEquals(3919.0, point2D_Double0.x, 0.01);
      assertEquals(3919, trip0.getID());
      assertEquals((-1), trip0.getRating());
      assertEquals((-2516.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("a`|'6GM5A&q#=", trip0.getLicencePlate());
      assertEquals(3919.0, trip0.getTime(), 0.01);
      assertEquals("km", trip0.getDriver());
      assertEquals("a`|'6GM5A&q#=", trip0.getClient());
      assertEquals((-128.992), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1922.0533928044363), trip0.getEstimatedPrice(), 0.01);
      assertEquals(3919.0, trip0.getPrice(), 0.01);
      assertEquals(3919.0, trip0.getRealTimeToClient(), 0.01);
      assertNotNull(trip0);
      
      Double double0 = trip0.getPrice();
      assertEquals(3919.0, point2D_Double0.y, 0.01);
      assertEquals(3919.0, point2D_Double0.x, 0.01);
      assertEquals(3919, trip0.getID());
      assertEquals((-1), trip0.getRating());
      assertEquals((-2516.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("a`|'6GM5A&q#=", trip0.getLicencePlate());
      assertEquals(3919.0, trip0.getTime(), 0.01);
      assertEquals("km", trip0.getDriver());
      assertEquals("a`|'6GM5A&q#=", trip0.getClient());
      assertEquals((-128.992), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1922.0533928044363), trip0.getEstimatedPrice(), 0.01);
      assertEquals(3919.0, trip0.getPrice(), 0.01);
      assertEquals(3919.0, trip0.getRealTimeToClient(), 0.01);
      assertNotNull(double0);
      assertEquals(3919.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-3884), point2D_Double0, point2D_Double0, (Double) 0.0, double0, localDate0, "lXc)s", "lXc)s", "lXc)s", 1937, (-1884.2987281395), point2D_Double0, (-1884.2987281395), 1.0, 1.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals((-1884.2987281395), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1.0), trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("lXc)s", trip0.getClient());
      assertEquals((-1884.2987281395), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1937, trip0.getRating());
      assertEquals("lXc)s", trip0.getLicencePlate());
      assertEquals("lXc)s", trip0.getDriver());
      assertEquals((-3884), trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNotNull(trip0);
      
      Double double1 = trip0.getPrice();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals((-1884.2987281395), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1.0), trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("lXc)s", trip0.getClient());
      assertEquals((-1884.2987281395), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1937, trip0.getRating());
      assertEquals("lXc)s", trip0.getLicencePlate());
      assertEquals("lXc)s", trip0.getDriver());
      assertEquals((-3884), trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Trip trip0 = new Trip();
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertNull(trip0.getLicencePlate());
      assertNotNull(trip0);
      
      String string0 = trip0.getLicencePlate();
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertNull(trip0.getLicencePlate());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-380.71547294), (-380.71547294));
      assertEquals((-380.71547294), point2D_Double0.y, 0.01);
      assertEquals((-380.71547294), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.of((-969), 1186, 0);
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1186, point2D_Double0, point2D_Double0, (Double) (-380.71547294), (Double) point2D_Double0.y, localDate0, "", "", "", 1186, 2657.99877141601, point2D_Double0, 2657.99877141601, (-969), 1670.7820198);
      assertEquals((-380.71547294), point2D_Double0.y, 0.01);
      assertEquals((-380.71547294), point2D_Double0.x, 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals(1186, trip0.getID());
      assertEquals(1186, trip0.getRating());
      assertEquals((-380.71547294), trip0.getTime(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals("", trip0.getClient());
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1670.7820198, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-380.71547294), trip0.getPrice(), 0.01);
      assertEquals((-969.0), trip0.getRealTimeToClient(), 0.01);
      assertNotNull(trip0);
      
      String string0 = trip0.getLicencePlate();
      assertEquals((-380.71547294), point2D_Double0.y, 0.01);
      assertEquals((-380.71547294), point2D_Double0.x, 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals(1186, trip0.getID());
      assertEquals(1186, trip0.getRating());
      assertEquals((-380.71547294), trip0.getTime(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals("", trip0.getClient());
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1670.7820198, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-380.71547294), trip0.getPrice(), 0.01);
      assertEquals((-969.0), trip0.getRealTimeToClient(), 0.01);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "", "", "I|-8eh[KF\"[/.@", 0, 0.0, point2D_Double0, (-3929.5), 2649.91, 629.57943);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertEquals(2649.91, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("I|-8eh[KF\"[/.@", trip0.getClient());
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-3929.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(629.57943, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNotNull(trip0);
      
      int int0 = trip0.getID();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertEquals(2649.91, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("I|-8eh[KF\"[/.@", trip0.getClient());
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-3929.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(629.57943, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-996), (-996));
      assertEquals((-996.0), point2D_Double0.x, 0.01);
      assertEquals((-996.0), point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-996));
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-996), point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "\nDura\u00E7\u00E3o prevista : ", "5", "s", 0, (-996.0), point2D_Double0, 5186.0, (-996), 0.0);
      assertEquals((-996.0), point2D_Double0.x, 0.01);
      assertEquals((-996.0), point2D_Double0.y, 0.01);
      assertEquals(5186.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("\nDura\u00E7\u00E3o prevista : ", trip0.getLicencePlate());
      assertEquals((-996.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-996.0), trip0.getTime(), 0.01);
      assertEquals("5", trip0.getDriver());
      assertEquals((-996.0), trip0.getPrice(), 0.01);
      assertEquals((-996), trip0.getID());
      assertEquals("s", trip0.getClient());
      assertEquals((-996.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0, trip0.getRating());
      assertNotNull(trip0);
      
      int int0 = trip0.getID();
      assertEquals((-996.0), point2D_Double0.x, 0.01);
      assertEquals((-996.0), point2D_Double0.y, 0.01);
      assertEquals(5186.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("\nDura\u00E7\u00E3o prevista : ", trip0.getLicencePlate());
      assertEquals((-996.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-996.0), trip0.getTime(), 0.01);
      assertEquals("5", trip0.getDriver());
      assertEquals((-996.0), trip0.getPrice(), 0.01);
      assertEquals((-996), trip0.getID());
      assertEquals("s", trip0.getClient());
      assertEquals((-996.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals((-996), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1110), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "%KV(\"", "@h/7tFZK", "@h/7tFZK", (-1110), 0.0, point2D_Double0, 0.0, (-1299.560038), (-1299.560038));
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1299.560038), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1110), trip0.getID());
      assertEquals("@h/7tFZK", trip0.getDriver());
      assertEquals((-1110), trip0.getRating());
      assertEquals("%KV(\"", trip0.getLicencePlate());
      assertEquals((-1299.560038), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("@h/7tFZK", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getEstimatedTimeToDest();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1299.560038), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1110), trip0.getID());
      assertEquals("@h/7tFZK", trip0.getDriver());
      assertEquals((-1110), trip0.getRating());
      assertEquals("%KV(\"", trip0.getLicencePlate());
      assertEquals((-1299.560038), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("@h/7tFZK", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      OffsetDateTime offsetDateTime0 = MockInstant.atOffset(instant0, zoneOffset0);
      assertNotNull(offsetDateTime0);
      
      LocalDate localDate0 = MockLocalDate.from(offsetDateTime0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "0s[0S NK&p.", "0s[0S NK&p.", "0s[0S NK&p.", 1, 1.0, point2D_Double0, 1.0, 1, 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getClient());
      assertEquals(1.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getDriver());
      assertEquals(1, trip0.getID());
      assertEquals(1, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getEstimatedTimeToDest();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getClient());
      assertEquals(1.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getDriver());
      assertEquals(1, trip0.getID());
      assertEquals(1, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1110), point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "%KV(\"", "@h/7tFZK", "@h/7tFZK", (-1110), 0.0, point2D_Double0, 0.0, (-1299.560038), (-1299.560038));
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-1110), trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("@h/7tFZK", trip0.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-1110), trip0.getRating());
      assertEquals("@h/7tFZK", trip0.getClient());
      assertEquals((-1299.560038), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-1299.560038), trip0.getRealTimeToClient(), 0.01);
      assertEquals("%KV(\"", trip0.getLicencePlate());
      assertNotNull(trip0);
      
      double double0 = trip0.getEstimatedTimeToClient();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-1110), trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("@h/7tFZK", trip0.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-1110), trip0.getRating());
      assertEquals("@h/7tFZK", trip0.getClient());
      assertEquals((-1299.560038), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-1299.560038), trip0.getRealTimeToClient(), 0.01);
      assertEquals("%KV(\"", trip0.getLicencePlate());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0, 0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.ofYears((-2001));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "", (String) null, (String) null, 1, 0.0, point2D_Double0, 1875.896, 1, 2487.946702543646);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(2487.946702543646, trip0.getEstimatedPrice(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(1875.896, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getEstimatedTimeToClient();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(2487.946702543646, trip0.getEstimatedPrice(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(1875.896, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1875.896, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      OffsetDateTime offsetDateTime0 = MockInstant.atOffset(instant0, zoneOffset0);
      assertNotNull(offsetDateTime0);
      
      LocalDate localDate0 = MockLocalDate.from(offsetDateTime0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "0s[0S NK&p.", "0s[0S NK&p.", "0s[0S NK&p.", 1, 1.0, point2D_Double0, 1.0, 1, 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(1, trip0.getRating());
      assertEquals("0s[0S NK&p.", trip0.getLicencePlate());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getDriver());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getEstimatedPrice();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(1, trip0.getRating());
      assertEquals("0s[0S NK&p.", trip0.getLicencePlate());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getDriver());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.ofDays(0);
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) 0.0, localDate0, "", "", "", 0, 846.2688435587817, point2D_Double0, (-459.3), (-142.0), (-142.0));
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(846.2688435587817, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals("", trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertEquals((-142.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals((-459.3), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-142.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getEstimatedPrice();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(846.2688435587817, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals("", trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertEquals((-142.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals((-459.3), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-142.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-142.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Trip trip0 = new Trip();
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertNotNull(trip0);
      
      String string0 = trip0.getDriver();
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(3877, point2D_Double0, point2D_Double0, (Double) (-1.0), (Double) (-1.0), localDate0, "", "", "", 0, 0L, point2D_Double0, (-1475.976867007), 0.0, 1375.7831963);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-1.0), trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1375.7831963, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals((-1.0), trip0.getTime(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals((-1475.976867007), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(3877, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(trip0);
      
      String string0 = trip0.getDriver();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-1.0), trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1375.7831963, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals((-1.0), trip0.getTime(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals((-1475.976867007), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(3877, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Trip trip0 = new Trip();
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertNull(trip0.getDriver());
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNotNull(trip0);
      
      String string0 = trip0.getClient();
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertNull(trip0.getDriver());
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(3877, point2D_Double0, point2D_Double0, (Double) (-1.0), (Double) (-1.0), localDate0, "", "", "", 0, 0L, point2D_Double0, (-1475.976867007), 0.0, 1375.7831963);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals("", trip0.getClient());
      assertEquals(1375.7831963, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1.0), trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(3877, trip0.getID());
      assertEquals((-1475.976867007), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals((-1.0), trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertNotNull(trip0);
      
      String string0 = trip0.getClient();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals("", trip0.getClient());
      assertEquals(1375.7831963, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1.0), trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(3877, trip0.getID());
      assertEquals((-1475.976867007), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals((-1.0), trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Point2D.Double point2D_Double1 = new Point2D.Double(1627.9207160477, 892.1);
      assertEquals(892.1, point2D_Double1.y, 0.01);
      assertEquals(1627.9207160477, point2D_Double1.x, 0.01);
      assertNotNull(point2D_Double1);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(3877, point2D_Double0, point2D_Double1, (Double) (-1.0), (Double) (-1.0), localDate0, "", "", "", 0, 0L, point2D_Double1, (-1475.976867007), 0.0, 1375.7831963);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(892.1, point2D_Double1.y, 0.01);
      assertEquals(1627.9207160477, point2D_Double1.x, 0.01);
      assertEquals((-1475.976867007), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1.0), trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1375.7831963, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals((-1.0), trip0.getPrice(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals("", trip0.getClient());
      assertEquals(3877, trip0.getID());
      assertEquals("", trip0.getLicencePlate());
      assertNotNull(trip0);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      
      double double0 = trip0.distance();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(892.1, point2D_Double1.y, 0.01);
      assertEquals(1627.9207160477, point2D_Double1.x, 0.01);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertEquals((-1475.976867007), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1.0), trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1375.7831963, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals((-1.0), trip0.getPrice(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals("", trip0.getClient());
      assertEquals(3877, trip0.getID());
      assertEquals("", trip0.getLicencePlate());
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(1856.3319389961634, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      OffsetDateTime offsetDateTime0 = MockInstant.atOffset(instant0, zoneOffset0);
      assertNotNull(offsetDateTime0);
      
      LocalDate localDate0 = MockLocalDate.from(offsetDateTime0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "0s[0S NK&p.", "0s[0S NK&p.", "0s[0S NK&p.", 1, 1.0, point2D_Double0, 1.0, 1, 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(1, trip0.getID());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getLicencePlate());
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getClient());
      assertEquals(1.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getDriver());
      assertEquals(1, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertNotNull(trip0);
      
      Trip trip1 = trip0.clone();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotSame(trip0, trip1);
      assertNotSame(trip1, trip0);
      assertEquals(1, trip0.getID());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getLicencePlate());
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getClient());
      assertEquals(1.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getDriver());
      assertEquals(1, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1.0, trip1.getEstimatedTimeToDest(), 0.01);
      assertEquals("0s[0S NK&p.", trip1.getDriver());
      assertEquals(0.0, trip1.getPrice(), 0.01);
      assertEquals(1.0, trip1.getRealTimeToClient(), 0.01);
      assertEquals("0s[0S NK&p.", trip1.getClient());
      assertEquals(1.0, trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals("0s[0S NK&p.", trip1.getLicencePlate());
      assertEquals(1, trip1.getRating());
      assertEquals(1, trip1.getID());
      assertEquals(0.0, trip1.getTime(), 0.01);
      assertEquals(0.0, trip1.getEstimatedPrice(), 0.01);
      assertNotNull(trip1);
      assertFalse(trip1.equals((Object)trip0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0, 0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "ik@+Dz5", (String) null, "", (-1), 0.0, point2D_Double0, 0.0, 0.0, 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals((-1), trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("ik@+Dz5", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertNull(trip0.getDriver());
      assertNotNull(trip0);
      
      Trip trip1 = trip0.clone();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotSame(trip0, trip1);
      assertNotSame(trip1, trip0);
      assertEquals((-1), trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("ik@+Dz5", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertNull(trip0.getDriver());
      assertEquals((-1), trip1.getRating());
      assertEquals("ik@+Dz5", trip1.getLicencePlate());
      assertEquals(0.0, trip1.getPrice(), 0.01);
      assertEquals(0.0, trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip1.getClient());
      assertNull(trip1.getDriver());
      assertEquals(0, trip1.getID());
      assertEquals(0.0, trip1.getTime(), 0.01);
      assertEquals(0.0, trip1.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip1.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip1.getEstimatedTimeToDest(), 0.01);
      assertNotNull(trip1);
      assertFalse(trip1.equals((Object)trip0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-996), (-996));
      assertEquals((-996.0), point2D_Double0.y, 0.01);
      assertEquals((-996.0), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-996));
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-996), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "\nDura\u00E7\u00E3o prevista : ", "5", "s", 0, (-996.0), point2D_Double0, 5186.0, (-996), 0.0);
      assertEquals((-996.0), point2D_Double0.y, 0.01);
      assertEquals((-996.0), point2D_Double0.x, 0.01);
      assertEquals((-996), trip0.getID());
      assertEquals((-996.0), trip0.getTime(), 0.01);
      assertEquals((-996.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-996.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals("\nDura\u00E7\u00E3o prevista : ", trip0.getLicencePlate());
      assertEquals("s", trip0.getClient());
      assertEquals((-996.0), trip0.getPrice(), 0.01);
      assertEquals(5186.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("5", trip0.getDriver());
      assertNotNull(trip0);
      
      Trip trip1 = trip0.clone();
      assertEquals((-996.0), point2D_Double0.y, 0.01);
      assertEquals((-996.0), point2D_Double0.x, 0.01);
      assertNotSame(trip0, trip1);
      assertNotSame(trip1, trip0);
      assertEquals((-996), trip0.getID());
      assertEquals((-996.0), trip0.getTime(), 0.01);
      assertEquals((-996.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-996.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals("\nDura\u00E7\u00E3o prevista : ", trip0.getLicencePlate());
      assertEquals("s", trip0.getClient());
      assertEquals((-996.0), trip0.getPrice(), 0.01);
      assertEquals(5186.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("5", trip0.getDriver());
      assertEquals((-996), trip1.getID());
      assertEquals((-996.0), trip1.getEstimatedTimeToDest(), 0.01);
      assertEquals((-996.0), trip1.getRealTimeToClient(), 0.01);
      assertEquals("\nDura\u00E7\u00E3o prevista : ", trip1.getLicencePlate());
      assertEquals(0, trip1.getRating());
      assertEquals("s", trip1.getClient());
      assertEquals((-996.0), trip1.getPrice(), 0.01);
      assertEquals((-996.0), trip1.getTime(), 0.01);
      assertEquals(5186.0, trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip1.getEstimatedPrice(), 0.01);
      assertEquals("5", trip1.getDriver());
      assertNotNull(trip1);
      assertFalse(trip1.equals((Object)trip0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-3884), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "lXc)s", "lXc)s", "lXc)s", 1937, (-1884.2987281395), point2D_Double0, (-1884.2987281395), 1.0, 1.0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1884.2987281395), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("lXc)s", trip0.getDriver());
      assertEquals("lXc)s", trip0.getClient());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1937, trip0.getRating());
      assertEquals((-1884.2987281395), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("lXc)s", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-3884), trip0.getID());
      assertNotNull(trip0);
      
      Trip trip1 = trip0.clone();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotSame(trip0, trip1);
      assertNotSame(trip1, trip0);
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1884.2987281395), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("lXc)s", trip0.getDriver());
      assertEquals("lXc)s", trip0.getClient());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1937, trip0.getRating());
      assertEquals((-1884.2987281395), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("lXc)s", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-3884), trip0.getID());
      assertEquals(0.0, trip1.getPrice(), 0.01);
      assertEquals((-1884.2987281395), trip1.getEstimatedTimeToDest(), 0.01);
      assertEquals("lXc)s", trip1.getLicencePlate());
      assertEquals((-1884.2987281395), trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals((-3884), trip1.getID());
      assertEquals(1.0, trip1.getEstimatedPrice(), 0.01);
      assertEquals("lXc)s", trip1.getClient());
      assertEquals(0.0, trip1.getTime(), 0.01);
      assertEquals(1.0, trip1.getRealTimeToClient(), 0.01);
      assertEquals("lXc)s", trip1.getDriver());
      assertEquals(1937, trip1.getRating());
      assertNotNull(trip1);
      assertFalse(trip1.equals((Object)trip0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(3919, 3919);
      assertEquals(3919.0, point2D_Double0.y, 0.01);
      assertEquals(3919.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.of(3919, (-2516), (-1));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(3919, point2D_Double0, point2D_Double0, (Double) 3919.0, (Double) point2D_Double0.x, localDate0, "a`|'6GM5A&q#=", "km", "a`|'6GM5A&q#=", (-1), (-2516), point2D_Double0, (-128.992), 3919.0, (-1922.0533928044363));
      assertEquals(3919.0, point2D_Double0.y, 0.01);
      assertEquals(3919.0, point2D_Double0.x, 0.01);
      assertEquals(3919, trip0.getID());
      assertEquals(3919.0, trip0.getPrice(), 0.01);
      assertEquals(3919.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("a`|'6GM5A&q#=", trip0.getClient());
      assertEquals((-128.992), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(3919.0, trip0.getTime(), 0.01);
      assertEquals((-2516.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1922.0533928044363), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1), trip0.getRating());
      assertEquals("a`|'6GM5A&q#=", trip0.getLicencePlate());
      assertEquals("km", trip0.getDriver());
      assertNotNull(trip0);
      
      Trip trip1 = trip0.clone();
      assertEquals(3919.0, point2D_Double0.y, 0.01);
      assertEquals(3919.0, point2D_Double0.x, 0.01);
      assertNotSame(trip0, trip1);
      assertNotSame(trip1, trip0);
      assertEquals(3919, trip0.getID());
      assertEquals(3919.0, trip0.getPrice(), 0.01);
      assertEquals(3919.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("a`|'6GM5A&q#=", trip0.getClient());
      assertEquals((-128.992), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(3919.0, trip0.getTime(), 0.01);
      assertEquals((-2516.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1922.0533928044363), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1), trip0.getRating());
      assertEquals("a`|'6GM5A&q#=", trip0.getLicencePlate());
      assertEquals("km", trip0.getDriver());
      assertEquals(3919, trip1.getID());
      assertEquals(3919.0, trip1.getPrice(), 0.01);
      assertEquals("km", trip1.getDriver());
      assertEquals((-1922.0533928044363), trip1.getEstimatedPrice(), 0.01);
      assertEquals((-1), trip1.getRating());
      assertEquals("a`|'6GM5A&q#=", trip1.getLicencePlate());
      assertEquals(3919.0, trip1.getTime(), 0.01);
      assertEquals("a`|'6GM5A&q#=", trip1.getClient());
      assertEquals(3919.0, trip1.getRealTimeToClient(), 0.01);
      assertEquals((-2516.0), trip1.getEstimatedTimeToDest(), 0.01);
      assertEquals((-128.992), trip1.getEstimatedTimeToClient(), 0.01);
      assertNotNull(trip1);
      assertFalse(trip1.equals((Object)trip0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Trip trip0 = new Trip();
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertNull(trip0.getDriver());
      assertNotNull(trip0);
      
      // Undeclared exception!
      try { 
        trip0.getTaxiPos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Trip trip0 = new Trip();
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getClient());
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(trip0);
      
      // Undeclared exception!
      try { 
        trip0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Trip trip0 = new Trip();
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(trip0);
      
      Trip trip1 = null;
      try {
        trip1 = new Trip(trip0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Trip trip0 = null;
      try {
        trip0 = new Trip((-3213), point2D_Double0, point2D_Double0, (Double) (-3547.7686934), (Double) (-584.899091761), (LocalDate) null, "", (String) null, "", (-3213), (-3547.7686934), point2D_Double0, 0.0, 0.0, (-939.607584101));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "", "", "I|-8eh[KF\"[/.@", 0, 0.0, point2D_Double0, (-3929.5), 2649.91, 629.57943);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertEquals(2649.91, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals((-3929.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("I|-8eh[KF\"[/.@", trip0.getClient());
      assertEquals(629.57943, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNotNull(trip0);
      
      int int0 = trip0.getRating();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertEquals(2649.91, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals((-3929.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("I|-8eh[KF\"[/.@", trip0.getClient());
      assertEquals(629.57943, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-2463), (-2463));
      assertEquals((-2463.0), point2D_Double0.x, 0.01);
      assertEquals((-2463.0), point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.ofMonths((-2463));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours((-1));
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-2463), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) (-2463.0), localDate0, (String) null, (String) null, "h:", 0, (-2463.0), point2D_Double0, (-2463), (-2463.0), 1.0);
      assertEquals((-2463.0), point2D_Double0.x, 0.01);
      assertEquals((-2463.0), point2D_Double0.y, 0.01);
      assertEquals((-2463), trip0.getID());
      assertEquals((-2463.0), trip0.getPrice(), 0.01);
      assertEquals((-2463.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-2463.0), trip0.getTime(), 0.01);
      assertEquals((-2463.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("h:", trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getDriver());
      assertEquals((-2463.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertNotNull(trip0);
      
      Trip trip1 = new Trip(trip0);
      assertEquals((-2463.0), point2D_Double0.x, 0.01);
      assertEquals((-2463.0), point2D_Double0.y, 0.01);
      assertEquals((-2463), trip0.getID());
      assertEquals((-2463.0), trip0.getPrice(), 0.01);
      assertEquals((-2463.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-2463.0), trip0.getTime(), 0.01);
      assertEquals((-2463.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("h:", trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getDriver());
      assertEquals((-2463.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals((-2463.0), trip1.getPrice(), 0.01);
      assertEquals((-2463), trip1.getID());
      assertNull(trip1.getDriver());
      assertEquals("h:", trip1.getClient());
      assertEquals(0, trip1.getRating());
      assertEquals((-2463.0), trip1.getRealTimeToClient(), 0.01);
      assertNull(trip1.getLicencePlate());
      assertEquals((-2463.0), trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals((-2463.0), trip1.getEstimatedTimeToDest(), 0.01);
      assertEquals((-2463.0), trip1.getTime(), 0.01);
      assertEquals(1.0, trip1.getEstimatedPrice(), 0.01);
      assertNotNull(trip1);
      assertFalse(trip1.equals((Object)trip0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.y, localDate0, "", "", "I|-8eh[KF\"[/.@", 0, 0.0, point2D_Double0, (-3929.5), 2649.91, 629.57943);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals(2649.91, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals("I|-8eh[KF\"[/.@", trip0.getClient());
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertEquals(629.57943, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-3929.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertNotNull(trip0);
      
      Double double0 = trip0.getPrice();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals(2649.91, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals("I|-8eh[KF\"[/.@", trip0.getClient());
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertEquals(629.57943, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-3929.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      OffsetDateTime offsetDateTime0 = MockInstant.atOffset(instant0, zoneOffset0);
      assertNotNull(offsetDateTime0);
      
      LocalDate localDate0 = MockLocalDate.from(offsetDateTime0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "0s[0S NK&p.", "0s[0S NK&p.", "0s[0S NK&p.", 1, 1.0, point2D_Double0, 1.0, 1, 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1, trip0.getRating());
      assertEquals(1, trip0.getID());
      assertEquals("0s[0S NK&p.", trip0.getLicencePlate());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getClient());
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getDriver());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertNotNull(trip0);
      
      String string0 = trip0.getClient();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1, trip0.getRating());
      assertEquals(1, trip0.getID());
      assertEquals("0s[0S NK&p.", trip0.getLicencePlate());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getClient());
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("0s[0S NK&p.", trip0.getDriver());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertNotNull(string0);
      assertEquals("0s[0S NK&p.", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1110), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "%KV(\"", "@h/7tFZK", "@h/7tFZK", (-1110), 0.0, point2D_Double0, 0.0, (-1299.560038), (-1299.560038));
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals("%KV(\"", trip0.getLicencePlate());
      assertEquals((-1299.560038), trip0.getRealTimeToClient(), 0.01);
      assertEquals("@h/7tFZK", trip0.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-1110), trip0.getID());
      assertEquals("@h/7tFZK", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1299.560038), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1110), trip0.getRating());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(trip0);
      
      String string0 = trip0.getDriver();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals("%KV(\"", trip0.getLicencePlate());
      assertEquals((-1299.560038), trip0.getRealTimeToClient(), 0.01);
      assertEquals("@h/7tFZK", trip0.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-1110), trip0.getID());
      assertEquals("@h/7tFZK", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1299.560038), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1110), trip0.getRating());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(string0);
      assertEquals("@h/7tFZK", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-380.71547294), (-380.71547294));
      assertEquals((-380.71547294), point2D_Double0.x, 0.01);
      assertEquals((-380.71547294), point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.of((-969), 1186, 0);
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1186, point2D_Double0, point2D_Double0, (Double) (-380.71547294), (Double) point2D_Double0.y, localDate0, "", "", "", 1186, 2657.99877141601, point2D_Double0, 2657.99877141601, (-969), 1670.7820198);
      assertEquals((-380.71547294), point2D_Double0.x, 0.01);
      assertEquals((-380.71547294), point2D_Double0.y, 0.01);
      assertEquals(1186, trip0.getID());
      assertEquals("", trip0.getLicencePlate());
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-380.71547294), trip0.getPrice(), 0.01);
      assertEquals(1186, trip0.getRating());
      assertEquals((-969.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals("", trip0.getClient());
      assertEquals(1670.7820198, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-380.71547294), trip0.getTime(), 0.01);
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(trip0);
      
      Double double0 = trip0.getTime();
      assertEquals((-380.71547294), point2D_Double0.x, 0.01);
      assertEquals((-380.71547294), point2D_Double0.y, 0.01);
      assertEquals(1186, trip0.getID());
      assertEquals("", trip0.getLicencePlate());
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-380.71547294), trip0.getPrice(), 0.01);
      assertEquals(1186, trip0.getRating());
      assertEquals((-969.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals("", trip0.getClient());
      assertEquals(1670.7820198, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-380.71547294), trip0.getTime(), 0.01);
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(double0);
      assertEquals((-380.71547294), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-380.71547294), (-380.71547294));
      assertEquals((-380.71547294), point2D_Double0.y, 0.01);
      assertEquals((-380.71547294), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.of((-969), 1186, 0);
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1186, point2D_Double0, point2D_Double0, (Double) (-380.71547294), (Double) point2D_Double0.y, localDate0, "", "", "", 1186, 2657.99877141601, point2D_Double0, 2657.99877141601, (-969), 1670.7820198);
      assertEquals((-380.71547294), point2D_Double0.y, 0.01);
      assertEquals((-380.71547294), point2D_Double0.x, 0.01);
      assertEquals(1186, trip0.getID());
      assertEquals((-380.71547294), trip0.getTime(), 0.01);
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals(1186, trip0.getRating());
      assertEquals("", trip0.getClient());
      assertEquals(1670.7820198, trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-380.71547294), trip0.getPrice(), 0.01);
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-969.0), trip0.getRealTimeToClient(), 0.01);
      assertNotNull(trip0);
      
      Point2D.Double point2D_Double1 = trip0.getStart();
      assertEquals((-380.71547294), point2D_Double0.y, 0.01);
      assertEquals((-380.71547294), point2D_Double0.x, 0.01);
      assertEquals((-380.71547294), point2D_Double1.y, 0.01);
      assertEquals((-380.71547294), point2D_Double1.x, 0.01);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertEquals(1186, trip0.getID());
      assertEquals((-380.71547294), trip0.getTime(), 0.01);
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals(1186, trip0.getRating());
      assertEquals("", trip0.getClient());
      assertEquals(1670.7820198, trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-380.71547294), trip0.getPrice(), 0.01);
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-969.0), trip0.getRealTimeToClient(), 0.01);
      assertNotNull(point2D_Double1);
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-2463), (-2463));
      assertEquals((-2463.0), point2D_Double0.x, 0.01);
      assertEquals((-2463.0), point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.ofMonths((-2463));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours((-1));
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-2463), point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) (-2463.0), localDate0, (String) null, (String) null, "h:", 0, (-2463.0), point2D_Double0, (-2463), (-2463.0), 1.0);
      assertEquals((-2463.0), point2D_Double0.x, 0.01);
      assertEquals((-2463.0), point2D_Double0.y, 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals((-2463), trip0.getID());
      assertNull(trip0.getLicencePlate());
      assertNull(trip0.getDriver());
      assertEquals((-2463.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("h:", trip0.getClient());
      assertEquals((-2463.0), trip0.getTime(), 0.01);
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-2463.0), trip0.getPrice(), 0.01);
      assertEquals((-2463.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-2463.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getEstimatedTimeToDest();
      assertEquals((-2463.0), point2D_Double0.x, 0.01);
      assertEquals((-2463.0), point2D_Double0.y, 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals((-2463), trip0.getID());
      assertNull(trip0.getLicencePlate());
      assertNull(trip0.getDriver());
      assertEquals((-2463.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("h:", trip0.getClient());
      assertEquals((-2463.0), trip0.getTime(), 0.01);
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-2463.0), trip0.getPrice(), 0.01);
      assertEquals((-2463.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-2463.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-2463.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-380.71547294), (-380.71547294));
      assertEquals((-380.71547294), point2D_Double0.y, 0.01);
      assertEquals((-380.71547294), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.of((-969), 1186, 0);
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1186, point2D_Double0, point2D_Double0, (Double) (-380.71547294), (Double) point2D_Double0.x, localDate0, "", "", "", 1186, 2657.99877141601, point2D_Double0, 2657.99877141601, (-969), 1670.7820198);
      assertEquals((-380.71547294), point2D_Double0.y, 0.01);
      assertEquals((-380.71547294), point2D_Double0.x, 0.01);
      assertEquals(1670.7820198, trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-969.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-380.71547294), trip0.getPrice(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals("", trip0.getClient());
      assertEquals(1186, trip0.getID());
      assertEquals(1186, trip0.getRating());
      assertEquals((-380.71547294), trip0.getTime(), 0.01);
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(trip0);
      
      Point2D.Double point2D_Double1 = trip0.getTaxiPos();
      assertEquals((-380.71547294), point2D_Double0.y, 0.01);
      assertEquals((-380.71547294), point2D_Double0.x, 0.01);
      assertEquals((-380.71547294), point2D_Double1.y, 0.01);
      assertEquals((-380.71547294), point2D_Double1.x, 0.01);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertEquals(1670.7820198, trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-969.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-380.71547294), trip0.getPrice(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals("", trip0.getClient());
      assertEquals(1186, trip0.getID());
      assertEquals(1186, trip0.getRating());
      assertEquals((-380.71547294), trip0.getTime(), 0.01);
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(point2D_Double1);
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.x, localDate0, "", "", "I|-8eh[KF\"[/.@", 0, 0.0, point2D_Double0, (-3929.5), 2649.91, 629.57943);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(2649.91, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals("I|-8eh[KF\"[/.@", trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-3929.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(629.57943, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(trip0);
      
      Point2D.Double point2D_Double1 = trip0.getEnd();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertEquals(2649.91, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals("I|-8eh[KF\"[/.@", trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-3929.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(629.57943, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(point2D_Double1);
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.x, localDate0, "", "", "I|-8eh[KF\"[/.@", 0, 0.0, point2D_Double0, (-3929.5), 2649.91, 629.57943);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(2649.91, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals(629.57943, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-3929.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("I|-8eh[KF\"[/.@", trip0.getClient());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertNotNull(trip0);
      
      double double0 = trip0.getEstimatedTimeToClient();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(2649.91, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals(629.57943, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-3929.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("I|-8eh[KF\"[/.@", trip0.getClient());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertEquals((-3929.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-380.71547294), (-380.71547294));
      Period period0 = Period.of((-969), 1186, 0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Trip trip0 = new Trip(1186, point2D_Double0, point2D_Double0, (Double) (-380.71547294), (Double) point2D_Double0.x, localDate0, "", "", "", 1186, 2657.99877141601, point2D_Double0, 2657.99877141601, (-969), 1670.7820198);
      double double0 = trip0.getEstimatedPrice();
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-969.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals(1670.7820198, double0, 0.01);
      assertEquals(1186, trip0.getID());
      assertEquals(1186, trip0.getRating());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-996), (-996));
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-996));
      Trip trip0 = new Trip((-996), point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "\nDura\u00E7\u00E3o prevista : ", "5", "s", 0, (-996.0), point2D_Double0, 5186.0, (-996), 0.0);
      String string0 = trip0.getLicencePlate();
      assertEquals((-996), trip0.getID());
      assertEquals(0, trip0.getRating());
      assertEquals((-996.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-996.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals("s", trip0.getClient());
      assertEquals(5186.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("\nDura\u00E7\u00E3o prevista : ", string0);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("5", trip0.getDriver());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-996), (-996));
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-996));
      Trip trip0 = new Trip((-996), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "\nDura\u00E7\u00E3o prevista : ", "5", "s", 0, (-996.0), point2D_Double0, 5186.0, (-996), 0.0);
      trip0.getDate();
      assertEquals("5", trip0.getDriver());
      assertEquals(5186.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-996.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals("\nDura\u00E7\u00E3o prevista : ", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-996), trip0.getID());
      assertEquals((-996.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals("s", trip0.getClient());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip((-3884), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "lXc)s", "lXc)s", "lXc)s", 1937, (-1884.2987281395), point2D_Double0, (-1884.2987281395), 1.0, 1.0);
      trip0.distance();
      assertEquals(1937, trip0.getRating());
      assertEquals((-3884), trip0.getID());
      assertEquals((-1884.2987281395), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1884.2987281395), trip0.getEstimatedTimeToDest(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-380.71547294), (-380.71547294));
      Period period0 = Period.of((-969), 1186, 0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Trip trip0 = new Trip(1186, point2D_Double0, point2D_Double0, (Double) (-380.71547294), (Double) point2D_Double0.y, localDate0, "", "", "", 1186, 2657.99877141601, point2D_Double0, 2657.99877141601, (-969), 1670.7820198);
      double double0 = trip0.getRealTimeToClient();
      assertEquals(1670.7820198, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1186, trip0.getRating());
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1186, trip0.getID());
      assertEquals((-969.0), double0, 0.01);
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToDest(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-380.71547294), (-380.71547294));
      Period period0 = Period.of((-969), 1186, 0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Trip trip0 = new Trip(1186, point2D_Double0, point2D_Double0, (Double) (-380.71547294), (Double) point2D_Double0.x, localDate0, "", "", "", 1186, 2657.99877141601, point2D_Double0, 2657.99877141601, (-969), 1670.7820198);
      int int0 = trip0.getID();
      assertEquals(1186, int0);
      assertEquals(1670.7820198, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-969.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(2657.99877141601, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1186, trip0.getRating());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Trip trip0 = new Trip();
      // Undeclared exception!
      try { 
        trip0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1));
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "PBZXET&W", "PBZXET&W", "PBZXET&W", (-1), (-1), point2D_Double0, (-1), (-1), 0.0);
      String string0 = trip0.toString();
      assertEquals("Viagem de (0.0,0.0) ---> (0.0,0.0)\nData : 1969-12-31\nDist\u00E2ncia : 0km\nDura\u00E7\u00E3o prevista : -1h:0m:0s\nDura\u00E7\u00E3o real : 0h:0m:0s\nPre\u00E7o : 0\u20AC\nEmail condutor : PBZXET&W\nEmail cliente : PBZXET&W\nMatr\u00EDcula ve\u00EDculo : PBZXET&W\nClassifica\u00E7\u00E3o : N\u00E3o classificado\nPosi\u00E7\u00E3o inicial do taxi : [0.0,0.0]\nTempo previsto at\u00E9 ao cliente : -1h:0m:0s\nTempo real at\u00E9 ao cliente : -1h:0m:0s\nPre\u00E7o estimado : 0\u20AC\numer.Trip id : -1", string0);
  }
}
