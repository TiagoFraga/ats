package umer;/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 18 18:41:24 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Company_ESTest extends Company_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Company company0 = new Company("", "");
      Company company1 = new Company(company0);
      Trip trip0 = new Trip();
      LocalDate localDate0 = trip0.getDate();
      trip0.getEnd();
      LocalDate localDate1 = trip0.getDate();
      company1.addTrip(trip0);
      company1.pickDriver();
      company1.toString();
      company1.availiableTaxis();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      point2D_Double0.clone();
      company1.moneyGeneratedBetween(localDate0, localDate1);
      company0.pickVehicle(point2D_Double0);
      // Undeclared exception!
      try { 
        company1.getTrips();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Company company0 = new Company("./s^=o K:~`A*dw", "./s^=o K:~`A*dw");
      Boolean boolean0 = Boolean.TRUE;
      Driver driver0 = mock(Driver.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, (Boolean) null).when(driver0).isAvailable();
      doReturn("./s^=o K:~`A*dw").when(driver0).getEmail();
      Trip trip0 = new Trip();
      Boolean.getBoolean("./s^=o K:~`A*dw");
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Trip trip1 = mock(Trip.class, new ViolatedAssumptionAnswer());
      doReturn(trip0).when(trip1).clone();
      doReturn(0.0).when(trip1).distance();
      doReturn(double0, double1).when(trip1).getPrice();
      company0.addTrip(trip1);
      Company company1 = company0.clone();
      company0.addDriver(driver0);
      company0.availiableTaxis();
      company1.getMoneyGenerated();
      Point2D.Double point2D_Double0 = trip0.getEnd();
      company0.pickVehicle(point2D_Double0);
      company1.getName();
      company1.getDrivers();
      System.setCurrentTimeMillis(1L);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(5636);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      company1.moneyGeneratedBetween(localDate0, localDate0);
      company1.getDrivers();
      company1.getVehicles();
      // Undeclared exception!
      try { 
        company0.pickDriver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Company company0 = new Company("kR<umvj r?(r", "kR<umvj r?(r");
      Company company1 = new Company(company0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("", (-1805.186), point2D_Double0, "");
      Bike bike0 = new Bike("", (-1805.186), point2D_Double0, "");
      Bike bike1 = bike0.clone();
      LinkedList<String> linkedList0 = bike1.getQueue();
      van0.setQueue(linkedList0);
      Van van1 = new Van(van0);
      company0.addVehicle(van1);
      company0.equals(company1);
      company0.clone();
      company0.pickVehicle(point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Company company0 = new Company("", "");
      company0.getDrivers();
      company0.pickDriver();
      company0.toString();
      company0.getTotalTrips();
      company0.printDrivers();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3124L);
      Point2D.Double point2D_Double0 = new Point2D.Double(0, (-1301.93526633743));
      ArrayList<Trip> arrayList0 = company0.getTrips();
      Client client0 = new Client((String) null, "\neMail : ", "\n---Condutores \n", "7 m", localDate0, point2D_Double0, (-1301.93526633743), arrayList0, 0, (-679.9), false, (String) null);
      Point2D.Double point2D_Double1 = client0.getPosition();
      Double double0 = new Double(0);
      Trip trip0 = new Trip(0, point2D_Double1, point2D_Double1, (Double) 0.0, double0, localDate0, "7 m", "2)", "\n---Condutores \n", 0, 0, point2D_Double0, (-3301.14346135), 0, 0.0);
      company0.addTrip(trip0);
      company0.getTrips();
      company0.printDrivers();
      company0.getTrips();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Company company0 = new Company("sWJh*`+bA%HZ", "sWJh*`+bA%HZ");
      Company company1 = new Company(company0);
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (-695.8279008552));
      company1.getVehicles();
      Double double0 = new Double(0.0);
      Double double1 = new Double(1.0);
      LocalDate localDate0 = MockLocalDate.now();
      company1.getDates();
      Double.isFinite(1.0);
      company1.pickDriver();
      Trip trip0 = new Trip(986, point2D_Double0, point2D_Double0, double0, double1, localDate0, "Mx_", "Mx_", "\nFila de espera : ", 1609, 0.0, point2D_Double0, 65.0, 0.0, (-5797.6));
      Point2D.Double point2D_Double1 = trip0.getEnd();
      point2D_Double1.clone();
      point2D_Double1.setLocation((Point2D) point2D_Double0);
      Van van0 = new Van("(xW-Mf)QW(s7?", 0.0, point2D_Double1, (String) null);
      company1.addVehicle(van0);
      company1.equals(company0);
      company1.addTrip(trip0);
      company0.getDates();
      company0.getPoints();
      company0.getTrips();
      company1.addTrip(trip0);
      company1.getPoints();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Company company0 = new Company("", "");
      Period period0 = Period.ofDays(303);
      IsoChronology isoChronology0 = period0.getChronology();
      period0.normalized();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      company0.moneyGeneratedBetween(localDate0, localDate0);
      Vehicle vehicle0 = null;
      // Undeclared exception!
      try { 
        company0.addVehicle((Vehicle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Company company0 = new Company("", "");
      company0.getTrips();
      company0.toString();
      company0.getTrips();
      company0.printVehicles();
      company0.getName();
      company0.getPassword();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Company company0 = new Company(")\nOwner : ", "");
      Point2D.Double point2D_Double0 = null;
      company0.pickVehicle((Point2D.Double) null);
      company0.availiableTaxis();
      Company company1 = new Company("\nEmail condutor : ", "\nEmail condutor : ");
      company0.equals(company1);
      company1.pickVehicle((Point2D.Double) null);
      company1.getMoneyGenerated();
      company1.availiableTaxis();
      Trip trip0 = new Trip();
      // Undeclared exception!
      try { 
        trip0.getTaxiPos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Company company0 = null;
      try {
        company0 = new Company((Company) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Company company0 = new Company("", "B(Rff8 ");
      company0.printVehicles();
      Company company1 = new Company("\nN\u00FAmero de viagens : ", "");
      // Undeclared exception!
      try { 
        company1.addTrip((Trip) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Company company0 = new Company((String) null, (String) null);
      assertNull(company0.getName());
      assertNull(company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertNotNull(company0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double(1.9, 1.9);
      Van van0 = new Van("", 1.9, point2D_Double0, (String) null);
      Van van1 = new Van(van0);
      company0.addVehicle(van1);
      company0.getVehicles();
      Company company1 = new Company(company0);
      Company company2 = company1.clone();
      company2.printDrivers();
      company1.getTrips();
      company1.getPassword();
      // Undeclared exception!
      try { 
        company2.equals(company1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Company company0 = new Company("E9#>ux@", "X\"&;I`~");
      company0.getDates();
      company0.getPassword();
      // Undeclared exception!
      try { 
        company0.addVehicle((Vehicle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Company company0 = new Company("\n\n", "");
      Trip trip0 = new Trip();
      company0.addTrip(trip0);
      company0.getMoneyGenerated();
      company0.getMoneyGenerated();
      company0.getTotalTrips();
      // Undeclared exception!
      try { 
        MockIsoChronology.dateNow((IsoChronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Company company0 = new Company("", "");
      Company company1 = new Company(company0);
      company1.getDates();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "jEUJyw&'IPluA%<VW,";
      Company company0 = new Company("jEUJyw&'IPluA%<VW,", "jEUJyw&'IPluA%<VW,");
      Company company1 = new Company(company0);
      company0.printDrivers();
      Trip trip0 = new Trip();
      company1.addTrip(trip0);
      // Undeclared exception!
      try { 
        company1.getTrips();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = null;
      Company company0 = new Company((String) null, (String) null);
      LocalDate localDate0 = MockLocalDate.now();
      company0.toString();
      Client client0 = new Client("", "", "", "F<21@bu'", localDate0);
      Point2D.Double point2D_Double0 = client0.getPosition();
      client0.setPassword("y?-r7Vy>s");
      point2D_Double0.x = 0.0;
      Bike bike0 = new Bike("", 0.0, point2D_Double0, "F<21@bu'");
      client0.toString();
      bike0.setPrice(0.0);
      client0.setPremium(true);
      Point2D.Double point2D_Double1 = bike0.getPosition();
      point2D_Double1.setLocation(0.0, 60.0);
      company0.pickVehicle(point2D_Double1);
      company0.getName();
      // Undeclared exception!
      try { 
        company0.addDriver((Driver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Company company0 = new Company("umer.Bike", "\nVe\u00EDculo : ");
      Driver driver0 = mock(Driver.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(driver0).isAvailable();
      doReturn(")\nOwner : ").when(driver0).getEmail();
      company0.addDriver(driver0);
      company0.getTrips();
      company0.getVehicles();
      // Undeclared exception!
      try { 
        company0.availiableTaxis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Company company0 = new Company("", "\nDist\u00E2ncia : ");
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNotNull(company0);
      
      HashMap<String, Driver> hashMap0 = company0.getDrivers();
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ArrayList<Trip> arrayList0 = company0.getTrips();
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = company0.availiableTaxis();
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertFalse(boolean0);
      
      String string0 = company0.printDrivers();
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNull(string0);
      
      String string1 = company0.printVehicles();
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNull(string1);
      
      String string2 = company0.toString();
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("Empresa \n---Condutores \nnull\n---Ve\u00EDculos \nnull\nN\u00FAmero de viagens : 0\nDinheiro gerado : 0.0\n", string2);
      assertNotNull(string2);
      
      String string3 = company0.pickDriver();
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNull(string3);
      
      boolean boolean1 = company0.availiableTaxis();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertFalse(boolean1);
      
      Period period0 = Period.of(1, 329, (-480));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Boolean boolean2 = new Boolean(true);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Driver driver0 = new Driver("", "\nFator de fiabilidade : ", "#M/lm.i5Ki<J&fk", "", localDate0, 329, 0, boolean2, 329, arrayList0, 4, 1, (-480), (String) null, "#M/lm.i5Ki<J&fk", (-480));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1.0, driver0.getMoney(), 0.01);
      assertNull(driver0.getVehicle());
      assertEquals("#M/lm.i5Ki<J&fk", driver0.getCompany());
      assertEquals(0, driver0.getNumberOfTrips());
      assertEquals(4, driver0.getNumberOfReviews());
      assertTrue(driver0.isAvailable());
      assertEquals("", driver0.getAddress());
      assertEquals(0.0, driver0.getRating(), 0.01);
      assertEquals(329.0, driver0.getTimeCompliance(), 0.01);
      assertEquals("", driver0.getEmail());
      assertEquals(0, driver0.getExp());
      assertEquals((-480.0), driver0.getDeviation(), 0.01);
      assertEquals("#M/lm.i5Ki<J&fk", driver0.getPassword());
      assertEquals("\nFator de fiabilidade : ", driver0.getName());
      assertEquals(329.0, driver0.getTotalDistance(), 0.01);
      assertNotNull(driver0);
      
      company0.addDriver(driver0);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1.0, driver0.getMoney(), 0.01);
      assertNull(driver0.getVehicle());
      assertEquals("#M/lm.i5Ki<J&fk", driver0.getCompany());
      assertEquals(0, driver0.getNumberOfTrips());
      assertEquals(4, driver0.getNumberOfReviews());
      assertTrue(driver0.isAvailable());
      assertEquals("", driver0.getAddress());
      assertEquals(0.0, driver0.getRating(), 0.01);
      assertEquals(329.0, driver0.getTimeCompliance(), 0.01);
      assertEquals("", driver0.getEmail());
      assertEquals(0, driver0.getExp());
      assertEquals((-480.0), driver0.getDeviation(), 0.01);
      assertEquals("#M/lm.i5Ki<J&fk", driver0.getPassword());
      assertEquals("\nFator de fiabilidade : ", driver0.getName());
      assertEquals(329.0, driver0.getTotalDistance(), 0.01);
      
      String string4 = company0.pickDriver();
      assertFalse(string4.equals((Object)string2));
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = company0.getTotalTrips();
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, int0);
      
      Company company1 = company0.clone();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company1.getPassword());
      assertEquals(0, company1.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("", company1.getName());
      assertNotNull(company1);
      
      Trip trip0 = new Trip();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNotNull(trip0);
      
      HashMap<String, Driver> hashMap1 = company1.getDrivers();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company1.getPassword());
      assertEquals(0, company1.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("", company1.getName());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Trip trip1 = null;
      try {
        trip1 = new Trip(trip0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Company company0 = new Company("./s^=o K:~`A*dw", "./s^=o K:~`A*dw");
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertNotNull(company0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Driver driver0 = mock(Driver.class, new ViolatedAssumptionAnswer());
      doReturn("X").when(driver0).getEmail();
      Trip trip0 = new Trip();
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(trip0);
      
      ArrayList<Trip> arrayList0 = company0.getTrips();
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(trip0));
      
      Double double0 = new Double((-16.0));
      assertEquals((-16.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Trip trip1 = mock(Trip.class, new ViolatedAssumptionAnswer());
      doReturn(trip0).when(trip1).clone();
      doReturn(0.0).when(trip1).distance();
      doReturn(double0, double1).when(trip1).getPrice();
      company0.addTrip(trip1);
      assertFalse(trip0.equals((Object)trip1));
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals((-16.0), company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(1, company0.getTotalTrips());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      
      Company company1 = company0.clone();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals((-16.0), company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(1, company0.getTotalTrips());
      assertEquals(1, company1.getTotalTrips());
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals(0, company1.getPoints());
      assertEquals((-16.0), company1.getMoneyGenerated(), 0.01);
      assertNotNull(company1);
      
      company0.addDriver(driver0);
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals((-16.0), company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(1, company0.getTotalTrips());
      
      double double2 = company0.getMoneyGenerated();
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals((-16.0), company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(1, company0.getTotalTrips());
      assertEquals((-16.0), double2, 0.01);
      
      Point2D.Double point2D_Double0 = mock(Point2D.Double.class, new ViolatedAssumptionAnswer());
      String string0 = company0.pickVehicle(point2D_Double0);
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals((-16.0), company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(1, company0.getTotalTrips());
      assertNull(string0);
      
      String string1 = company1.getName();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals((-16.0), company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(1, company0.getTotalTrips());
      assertEquals(1, company1.getTotalTrips());
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals(0, company1.getPoints());
      assertEquals((-16.0), company1.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Company company0 = new Company("D", "\nDist\u00E2ncia : ");
      assertEquals("D", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertNotNull(company0);
      
      HashMap<String, Driver> hashMap0 = company0.getDrivers();
      assertEquals("D", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ArrayList<Trip> arrayList0 = company0.getTrips();
      assertEquals("D", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = company0.availiableTaxis();
      assertEquals("D", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertFalse(boolean0);
      
      String string0 = company0.printDrivers();
      assertEquals("D", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertNull(string0);
      
      String string1 = company0.printVehicles();
      assertEquals("D", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertNull(string1);
      
      String string2 = company0.toString();
      assertEquals("D", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("Empresa D\n---Condutores \nnull\n---Ve\u00EDculos \nnull\nN\u00FAmero de viagens : 0\nDinheiro gerado : 0.0\n", string2);
      assertNotNull(string2);
      
      String string3 = company0.pickDriver();
      assertEquals("D", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertNull(string3);
      
      boolean boolean1 = company0.availiableTaxis();
      assertTrue(boolean1 == boolean0);
      assertEquals("D", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertFalse(boolean1);
      
      Period period0 = Period.of(1, 329, (-480));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Boolean boolean2 = new Boolean(true);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Driver driver0 = new Driver("D", "\nFator de fiabilidade : ", "#M/lm.i5Ki<J&fk", "D", localDate0, 329, 0, boolean2, 329, arrayList0, 4, 1, (-480), (String) null, "#M/lm.i5Ki<J&fk", (-480));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertEquals("D", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("D", driver0.getEmail());
      assertEquals(0, driver0.getNumberOfTrips());
      assertNull(driver0.getVehicle());
      assertTrue(driver0.isAvailable());
      assertEquals(4, driver0.getNumberOfReviews());
      assertEquals(0.0, driver0.getRating(), 0.01);
      assertEquals(1.0, driver0.getMoney(), 0.01);
      assertEquals("D", driver0.getAddress());
      assertEquals(0, driver0.getExp());
      assertEquals(329.0, driver0.getTimeCompliance(), 0.01);
      assertEquals(329.0, driver0.getTotalDistance(), 0.01);
      assertEquals("#M/lm.i5Ki<J&fk", driver0.getCompany());
      assertEquals("\nFator de fiabilidade : ", driver0.getName());
      assertEquals("#M/lm.i5Ki<J&fk", driver0.getPassword());
      assertEquals((-480.0), driver0.getDeviation(), 0.01);
      assertNotNull(driver0);
      
      company0.addDriver(driver0);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertEquals("D", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("D", driver0.getEmail());
      assertEquals(0, driver0.getNumberOfTrips());
      assertNull(driver0.getVehicle());
      assertTrue(driver0.isAvailable());
      assertEquals(4, driver0.getNumberOfReviews());
      assertEquals(0.0, driver0.getRating(), 0.01);
      assertEquals(1.0, driver0.getMoney(), 0.01);
      assertEquals("D", driver0.getAddress());
      assertEquals(0, driver0.getExp());
      assertEquals(329.0, driver0.getTimeCompliance(), 0.01);
      assertEquals(329.0, driver0.getTotalDistance(), 0.01);
      assertEquals("#M/lm.i5Ki<J&fk", driver0.getCompany());
      assertEquals("\nFator de fiabilidade : ", driver0.getName());
      assertEquals("#M/lm.i5Ki<J&fk", driver0.getPassword());
      assertEquals((-480.0), driver0.getDeviation(), 0.01);
      
      String string4 = company0.pickDriver();
      assertFalse(string4.equals((Object)string2));
      assertEquals("D", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("D", string4);
      assertNotNull(string4);
      
      int int0 = company0.getTotalTrips();
      assertEquals("D", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, int0);
      
      Company company1 = company0.clone();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals("D", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("D", company1.getName());
      assertEquals("\nDist\u00E2ncia : ", company1.getPassword());
      assertEquals(0, company1.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertNotNull(company1);
      
      Trip trip0 = new Trip();
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertNotNull(trip0);
      
      HashMap<String, Driver> hashMap1 = company1.getDrivers();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertEquals("D", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nDist\u00E2ncia : ", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("D", company1.getName());
      assertEquals("\nDist\u00E2ncia : ", company1.getPassword());
      assertEquals(0, company1.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotNull(hashMap1);
      
      Trip trip1 = null;
      try {
        trip1 = new Trip(trip0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Company company0 = new Company("pYJ2|", "pYJ2|");
      assertEquals("pYJ2|", company0.getName());
      assertEquals("pYJ2|", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNotNull(company0);
      
      Company company1 = new Company(company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals("pYJ2|", company0.getName());
      assertEquals("pYJ2|", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("pYJ2|", company1.getName());
      assertEquals("pYJ2|", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertNotNull(company1);
      
      String string0 = company1.printDrivers();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("pYJ2|", company0.getName());
      assertEquals("pYJ2|", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("pYJ2|", company1.getName());
      assertEquals("pYJ2|", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertNull(string0);
      
      boolean boolean0 = company0.availiableTaxis();
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertEquals("pYJ2|", company0.getName());
      assertEquals("pYJ2|", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Company company0 = new Company("./s^=o K:~`A*dw", "./s^=o K:~`A*dw");
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertNotNull(company0);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      LocalDate localDate0 = MockLocalDate.now(clock0);
      assertNotNull(localDate0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Company company1 = new Company(company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals(0, company1.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertNotNull(company1);
      
      ArrayList<Trip> arrayList0 = company1.getTrips();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals(0, company1.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Driver driver0 = new Driver("_`#Ek=_b%kRGr\"!", "}tCzdw", "./s^=o K:~`A*dw", "*u", localDate0, 4.0, 4.0, boolean0, 4.0, arrayList0, (-1657), 2554.399522331, (-3633.38973), "*u", "H1o@:BJR8$JW^RogKv1", 4.0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals(0, company1.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("H1o@:BJR8$JW^RogKv1", driver0.getCompany());
      assertEquals(4.0, driver0.getTimeCompliance(), 0.01);
      assertEquals(4.0, driver0.getTotalDistance(), 0.01);
      assertEquals("}tCzdw", driver0.getName());
      assertEquals((-1657), driver0.getNumberOfReviews());
      assertEquals("_`#Ek=_b%kRGr\"!", driver0.getEmail());
      assertEquals("./s^=o K:~`A*dw", driver0.getPassword());
      assertEquals("*u", driver0.getVehicle());
      assertEquals(2554.399522331, driver0.getMoney(), 0.01);
      assertEquals(0, driver0.getExp());
      assertEquals(4.0, driver0.getRating(), 0.01);
      assertEquals("*u", driver0.getAddress());
      assertTrue(driver0.isAvailable());
      assertEquals(4.0, driver0.getDeviation(), 0.01);
      assertEquals(0, driver0.getNumberOfTrips());
      assertNotNull(driver0);
      
      Boolean boolean1 = driver0.isAvailable();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals(0, company1.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("H1o@:BJR8$JW^RogKv1", driver0.getCompany());
      assertEquals(4.0, driver0.getTimeCompliance(), 0.01);
      assertEquals(4.0, driver0.getTotalDistance(), 0.01);
      assertEquals("}tCzdw", driver0.getName());
      assertEquals((-1657), driver0.getNumberOfReviews());
      assertEquals("_`#Ek=_b%kRGr\"!", driver0.getEmail());
      assertEquals("./s^=o K:~`A*dw", driver0.getPassword());
      assertEquals("*u", driver0.getVehicle());
      assertEquals(2554.399522331, driver0.getMoney(), 0.01);
      assertEquals(0, driver0.getExp());
      assertEquals(4.0, driver0.getRating(), 0.01);
      assertEquals("*u", driver0.getAddress());
      assertTrue(driver0.isAvailable());
      assertEquals(4.0, driver0.getDeviation(), 0.01);
      assertEquals(0, driver0.getNumberOfTrips());
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Driver driver1 = mock(Driver.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1).when(driver1).isAvailable();
      doReturn("_`#Ek=_b%kRGr\"!").when(driver1).getEmail();
      Double double0 = new Double(1520.4);
      assertEquals(1520.4, (double)double0, 0.01);
      assertNotNull(double0);
      
      Trip trip0 = mock(Trip.class, new ViolatedAssumptionAnswer());
      doReturn((Trip) null).when(trip0).clone();
      doReturn((-446.2485)).when(trip0).distance();
      doReturn(double0, double0).when(trip0).getPrice();
      company0.addTrip(trip0);
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertEquals(1520.4, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(1, company0.getTotalTrips());
      assertEquals(1966, company0.getPoints());
      
      Company company2 = company0.clone();
      assertNotSame(company0, company1);
      assertNotSame(company0, company2);
      assertNotSame(company2, company1);
      assertNotSame(company2, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company2.equals((Object)company1));
      assertFalse(company2.equals((Object)company0));
      assertEquals(1520.4, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(1, company0.getTotalTrips());
      assertEquals(1966, company0.getPoints());
      assertEquals(1966, company2.getPoints());
      assertEquals("./s^=o K:~`A*dw", company2.getName());
      assertEquals(1, company2.getTotalTrips());
      assertEquals("./s^=o K:~`A*dw", company2.getPassword());
      assertEquals(1520.4, company2.getMoneyGenerated(), 0.01);
      assertNotNull(company2);
      
      company0.addDriver(driver1);
      assertNotSame(company0, company1);
      assertNotSame(company0, company2);
      assertNotSame(company1, company2);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company0.equals((Object)company2));
      assertFalse(company1.equals((Object)company2));
      assertFalse(company1.equals((Object)company0));
      assertFalse(driver0.equals((Object)driver1));
      assertEquals(1520.4, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(1, company0.getTotalTrips());
      assertEquals(1966, company0.getPoints());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals(0, company1.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("H1o@:BJR8$JW^RogKv1", driver0.getCompany());
      assertEquals(4.0, driver0.getTimeCompliance(), 0.01);
      assertEquals(4.0, driver0.getTotalDistance(), 0.01);
      assertEquals("}tCzdw", driver0.getName());
      assertEquals((-1657), driver0.getNumberOfReviews());
      assertEquals("_`#Ek=_b%kRGr\"!", driver0.getEmail());
      assertEquals("./s^=o K:~`A*dw", driver0.getPassword());
      assertEquals("*u", driver0.getVehicle());
      assertEquals(2554.399522331, driver0.getMoney(), 0.01);
      assertEquals(0, driver0.getExp());
      assertEquals(4.0, driver0.getRating(), 0.01);
      assertEquals("*u", driver0.getAddress());
      assertTrue(driver0.isAvailable());
      assertEquals(4.0, driver0.getDeviation(), 0.01);
      assertEquals(0, driver0.getNumberOfTrips());
      assertFalse(arrayList0.contains(trip0));
      
      boolean boolean2 = company0.availiableTaxis();
      assertNotSame(company0, company1);
      assertNotSame(company0, company2);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company0.equals((Object)company2));
      assertEquals(1520.4, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(1, company0.getTotalTrips());
      assertEquals(1966, company0.getPoints());
      assertTrue(boolean2);
      
      Point2D.Double point2D_Double0 = mock(Point2D.Double.class, new ViolatedAssumptionAnswer());
      String string0 = company0.pickVehicle(point2D_Double0);
      assertNotSame(company0, company1);
      assertNotSame(company0, company2);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company0.equals((Object)company2));
      assertEquals(1520.4, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(1, company0.getTotalTrips());
      assertEquals(1966, company0.getPoints());
      assertNull(string0);
      
      String string1 = company2.getName();
      assertNotSame(company0, company1);
      assertNotSame(company0, company2);
      assertNotSame(company2, company1);
      assertNotSame(company2, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company0.equals((Object)company2));
      assertFalse(company2.equals((Object)company1));
      assertFalse(company2.equals((Object)company0));
      assertEquals(1520.4, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(1, company0.getTotalTrips());
      assertEquals(1966, company0.getPoints());
      assertEquals(1966, company2.getPoints());
      assertEquals("./s^=o K:~`A*dw", company2.getName());
      assertEquals(1, company2.getTotalTrips());
      assertEquals("./s^=o K:~`A*dw", company2.getPassword());
      assertEquals(1520.4, company2.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Company company0 = new Company("./s^=o K:~`A*dw", "./s^=o K:~`A*dw");
      assertEquals(0, company0.getPoints());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertNotNull(company0);
      
      Boolean boolean0 = Boolean.valueOf("=:?+%ULJF,]M`L3Jbps");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Driver driver0 = mock(Driver.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(driver0).isAvailable();
      doReturn("./s^=o K:~`A*dw").when(driver0).getEmail();
      Double double0 = new Double(1207.81635);
      assertEquals(1207.81635, (double)double0, 0.01);
      assertNotNull(double0);
      
      Trip trip0 = mock(Trip.class, new ViolatedAssumptionAnswer());
      doReturn((Trip) null).when(trip0).clone();
      doReturn(1207.81635).when(trip0).distance();
      doReturn(double0, double0).when(trip0).getPrice();
      company0.addTrip(trip0);
      assertEquals(0, company0.getPoints());
      assertEquals(1207.81635, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals(1, company0.getTotalTrips());
      
      Company company1 = company0.clone();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getPoints());
      assertEquals(1207.81635, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(1207.81635, company1.getMoneyGenerated(), 0.01);
      assertEquals(1, company1.getTotalTrips());
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertNotNull(company1);
      
      company0.addDriver(driver0);
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertEquals(0, company0.getPoints());
      assertEquals(1207.81635, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals(1, company0.getTotalTrips());
      
      boolean boolean1 = company0.availiableTaxis();
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertEquals(0, company0.getPoints());
      assertEquals(1207.81635, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals(1, company0.getTotalTrips());
      assertFalse(boolean1);
      
      double double1 = company0.getMoneyGenerated();
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertEquals(0, company0.getPoints());
      assertEquals(1207.81635, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals(1, company0.getTotalTrips());
      assertEquals(1207.81635, double1, 0.01);
      
      Point2D.Double point2D_Double0 = mock(Point2D.Double.class, new ViolatedAssumptionAnswer());
      String string0 = company0.pickVehicle(point2D_Double0);
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertEquals(0, company0.getPoints());
      assertEquals(1207.81635, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals(1, company0.getTotalTrips());
      assertNull(string0);
      
      String string1 = company1.getName();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getPoints());
      assertEquals(1207.81635, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(1207.81635, company1.getMoneyGenerated(), 0.01);
      assertEquals(1, company1.getTotalTrips());
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals("./s^=o K:~`A*dw", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Company company0 = new Company((String) null, (String) null);
      assertNull(company0.getPassword());
      assertNull(company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNotNull(company0);
      
      Company company1 = new Company(company0);
      assertFalse(company1.equals((Object)company0));
      assertNull(company0.getPassword());
      assertNull(company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNull(company1.getPassword());
      assertNull(company1.getName());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertNotNull(company1);
      
      HashMap<String, Driver> hashMap0 = company1.getDrivers();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertNull(company0.getPassword());
      assertNull(company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNull(company1.getPassword());
      assertNull(company1.getName());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Trip trip0 = new Trip();
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertNotNull(trip0);
      
      Point2D.Double point2D_Double0 = trip0.getEnd();
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      Double double0 = new Double(1291.69450298);
      assertEquals(1291.69450298, (double)double0, 0.01);
      assertNotNull(double0);
      
      LocalDate localDate0 = MockLocalDate.of(1, 1, 5);
      assertNotNull(localDate0);
      
      Trip trip1 = new Trip(1, point2D_Double0, point2D_Double0, (Double) 0.0, double0, localDate0, "& ^`wkIa;8", "\n---Ve\u00EDculos \n", "\n---Ve\u00EDculos \n", 1, 0.0, point2D_Double0, 0.0, 1, 0.0);
      assertFalse(trip1.equals((Object)trip0));
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertEquals(1291.69450298, trip1.getPrice(), 0.01);
      assertEquals(1, trip1.getRating());
      assertEquals("\n---Ve\u00EDculos \n", trip1.getClient());
      assertEquals(1, trip1.getID());
      assertEquals("\n---Ve\u00EDculos \n", trip1.getDriver());
      assertEquals(0.0, trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals(1.0, trip1.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip1.getTime(), 0.01);
      assertEquals(0.0, trip1.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip1.getEstimatedPrice(), 0.01);
      assertEquals("& ^`wkIa;8", trip1.getLicencePlate());
      assertNotNull(trip1);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      company1.addTrip(trip1);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertNotSame(trip0, trip1);
      assertNotSame(trip1, trip0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertFalse(trip0.equals((Object)trip1));
      assertFalse(trip1.equals((Object)trip0));
      assertNull(company0.getPassword());
      assertNull(company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNull(company1.getPassword());
      assertNull(company1.getName());
      assertEquals(1291.69450298, company1.getMoneyGenerated(), 0.01);
      assertEquals(1, company1.getTotalTrips());
      assertEquals(1291, company1.getPoints());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertEquals(1291.69450298, trip1.getPrice(), 0.01);
      assertEquals(1, trip1.getRating());
      assertEquals("\n---Ve\u00EDculos \n", trip1.getClient());
      assertEquals(1, trip1.getID());
      assertEquals("\n---Ve\u00EDculos \n", trip1.getDriver());
      assertEquals(0.0, trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals(1.0, trip1.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip1.getTime(), 0.01);
      assertEquals(0.0, trip1.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip1.getEstimatedPrice(), 0.01);
      assertEquals("& ^`wkIa;8", trip1.getLicencePlate());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Company company0 = new Company((String) null, (String) null);
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertNull(company0.getPassword());
      assertNull(company0.getName());
      assertNotNull(company0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Driver driver0 = new Driver((String) null, (String) null, "", "Empresa ", localDate0, 0.0, "?\"}?_S>+n}L");
      assertEquals("?\"}?_S>+n}L", driver0.getCompany());
      assertEquals(0.0, driver0.getDeviation(), 0.01);
      assertNull(driver0.getName());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals(0, driver0.getExp());
      assertNull(driver0.getEmail());
      assertEquals("Empresa ", driver0.getAddress());
      assertEquals(0, driver0.getNumberOfTrips());
      assertNull(driver0.getVehicle());
      assertEquals(0, driver0.getNumberOfReviews());
      assertEquals("", driver0.getPassword());
      assertTrue(driver0.isAvailable());
      assertEquals(0.0, driver0.getTimeCompliance(), 0.01);
      assertEquals(0.0, driver0.getRating(), 0.01);
      assertNotNull(driver0);
      
      driver0.setExp(5);
      assertEquals("?\"}?_S>+n}L", driver0.getCompany());
      assertEquals(5, driver0.getExp());
      assertEquals(0.0, driver0.getDeviation(), 0.01);
      assertNull(driver0.getName());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertNull(driver0.getEmail());
      assertEquals("Empresa ", driver0.getAddress());
      assertEquals(0, driver0.getNumberOfTrips());
      assertNull(driver0.getVehicle());
      assertEquals(0, driver0.getNumberOfReviews());
      assertEquals("", driver0.getPassword());
      assertTrue(driver0.isAvailable());
      assertEquals(0.0, driver0.getTimeCompliance(), 0.01);
      assertEquals(0.0, driver0.getRating(), 0.01);
      
      driver0.setName("");
      assertEquals("?\"}?_S>+n}L", driver0.getCompany());
      assertEquals(5, driver0.getExp());
      assertEquals(0.0, driver0.getDeviation(), 0.01);
      assertEquals("", driver0.getName());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertNull(driver0.getEmail());
      assertEquals("Empresa ", driver0.getAddress());
      assertEquals(0, driver0.getNumberOfTrips());
      assertNull(driver0.getVehicle());
      assertEquals(0, driver0.getNumberOfReviews());
      assertEquals("", driver0.getPassword());
      assertTrue(driver0.isAvailable());
      assertEquals(0.0, driver0.getTimeCompliance(), 0.01);
      assertEquals(0.0, driver0.getRating(), 0.01);
      
      company0.addDriver(driver0);
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertNull(company0.getPassword());
      assertNull(company0.getName());
      assertEquals("?\"}?_S>+n}L", driver0.getCompany());
      assertEquals(5, driver0.getExp());
      assertEquals(0.0, driver0.getDeviation(), 0.01);
      assertEquals("", driver0.getName());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertNull(driver0.getEmail());
      assertEquals("Empresa ", driver0.getAddress());
      assertEquals(0, driver0.getNumberOfTrips());
      assertNull(driver0.getVehicle());
      assertEquals(0, driver0.getNumberOfReviews());
      assertEquals("", driver0.getPassword());
      assertTrue(driver0.isAvailable());
      assertEquals(0.0, driver0.getTimeCompliance(), 0.01);
      assertEquals(0.0, driver0.getRating(), 0.01);
      
      String string0 = company0.printVehicles();
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertNull(company0.getPassword());
      assertNull(company0.getName());
      assertNull(string0);
      
      String string1 = company0.pickDriver();
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertNull(company0.getPassword());
      assertNull(company0.getName());
      assertNull(string1);
      
      HashMap<String, Driver> hashMap0 = company0.getDrivers();
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertNull(company0.getPassword());
      assertNull(company0.getName());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ArrayList<Trip> arrayList0 = company0.getTrips();
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertNull(company0.getPassword());
      assertNull(company0.getName());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HashMap<String, Driver> hashMap1 = company0.getDrivers();
      assertNotSame(hashMap1, hashMap0);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertNull(company0.getPassword());
      assertNull(company0.getName());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotNull(hashMap1);
      
      String string2 = company0.pickDriver();
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertNull(company0.getPassword());
      assertNull(company0.getName());
      assertNull(string2);
      
      String string3 = company0.printDrivers();
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertNull(company0.getPassword());
      assertNull(company0.getName());
      assertEquals("nullnull\n", string3);
      assertNotNull(string3);
      
      String string4 = company0.getName();
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertNull(company0.getPassword());
      assertNull(company0.getName());
      assertNull(string4);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      Point2D.Double point2D_Double1 = new Point2D.Double((-1955.0470882), 55.0);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertNotNull(point2D_Double1);
      assertEquals((-1955.0470882), point2D_Double1.x, 0.01);
      assertEquals(55.0, point2D_Double1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Company company0 = new Company("", "");
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertNotNull(company0);
      
      Company company1 = new Company(company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company1.getPoints());
      assertEquals("", company1.getPassword());
      assertEquals(0, company1.getTotalTrips());
      assertEquals("", company1.getName());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertNotNull(company1);
      
      ArrayList<Trip> arrayList0 = company1.getTrips();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company1.getPoints());
      assertEquals("", company1.getPassword());
      assertEquals(0, company1.getTotalTrips());
      assertEquals("", company1.getName());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Company company0 = new Company("", "");
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertNotNull(company0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      point2D_Double0.x = (-695.20130902);
      Car car0 = new Car("\nN\u00FAmero de viagens : ", (-162.50164), point2D_Double0, "");
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals((-162.50164), car0.getReliable(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals("", car0.getOwner());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertTrue(car0.isAvailable());
      assertEquals("\nN\u00FAmero de viagens : ", car0.getLicencePlate());
      assertNotNull(car0);
      assertEquals((-695.20130902), point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      Car car1 = car0.clone();
      assertNotSame(car0, car1);
      assertNotSame(car1, car0);
      assertFalse(car1.equals((Object)car0));
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals((-162.50164), car0.getReliable(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals("", car0.getOwner());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertTrue(car0.isAvailable());
      assertEquals("\nN\u00FAmero de viagens : ", car0.getLicencePlate());
      assertEquals(1.5, car1.getPrice(), 0.01);
      assertEquals("\nN\u00FAmero de viagens : ", car1.getLicencePlate());
      assertTrue(car1.isAvailable());
      assertEquals((-162.50164), car1.getReliable(), 0.01);
      assertEquals("", car1.getOwner());
      assertEquals(65.0, car1.getSpeed(), 0.01);
      assertEquals(4, car1.getSeats());
      assertNotNull(car1);
      assertEquals((-695.20130902), point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      Car car2 = new Car(car1);
      assertFalse(car0.equals((Object)car1));
      assertFalse(car1.equals((Object)car0));
      assertFalse(car2.equals((Object)car1));
      assertFalse(car2.equals((Object)car0));
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals((-162.50164), car0.getReliable(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals("", car0.getOwner());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertTrue(car0.isAvailable());
      assertEquals("\nN\u00FAmero de viagens : ", car0.getLicencePlate());
      assertEquals(1.5, car1.getPrice(), 0.01);
      assertEquals("\nN\u00FAmero de viagens : ", car1.getLicencePlate());
      assertTrue(car1.isAvailable());
      assertEquals((-162.50164), car1.getReliable(), 0.01);
      assertEquals("", car1.getOwner());
      assertEquals(65.0, car1.getSpeed(), 0.01);
      assertEquals(4, car1.getSeats());
      assertEquals((-162.50164), car2.getReliable(), 0.01);
      assertEquals("\nN\u00FAmero de viagens : ", car2.getLicencePlate());
      assertTrue(car2.isAvailable());
      assertEquals(1.5, car2.getPrice(), 0.01);
      assertEquals(4, car2.getSeats());
      assertEquals(65.0, car2.getSpeed(), 0.01);
      assertEquals("", car2.getOwner());
      assertNotNull(car2);
      assertEquals((-695.20130902), point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      company0.addVehicle(car2);
      assertNotSame(car0, car1);
      assertNotSame(car0, car2);
      assertNotSame(car1, car2);
      assertNotSame(car1, car0);
      assertNotSame(car2, car1);
      assertNotSame(car2, car0);
      assertFalse(car0.equals((Object)car1));
      assertFalse(car0.equals((Object)car2));
      assertFalse(car1.equals((Object)car2));
      assertFalse(car1.equals((Object)car0));
      assertFalse(car2.equals((Object)car1));
      assertFalse(car2.equals((Object)car0));
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals((-162.50164), car0.getReliable(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals("", car0.getOwner());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertTrue(car0.isAvailable());
      assertEquals("\nN\u00FAmero de viagens : ", car0.getLicencePlate());
      assertEquals(1.5, car1.getPrice(), 0.01);
      assertEquals("\nN\u00FAmero de viagens : ", car1.getLicencePlate());
      assertTrue(car1.isAvailable());
      assertEquals((-162.50164), car1.getReliable(), 0.01);
      assertEquals("", car1.getOwner());
      assertEquals(65.0, car1.getSpeed(), 0.01);
      assertEquals(4, car1.getSeats());
      assertEquals((-162.50164), car2.getReliable(), 0.01);
      assertEquals("\nN\u00FAmero de viagens : ", car2.getLicencePlate());
      assertTrue(car2.isAvailable());
      assertEquals(1.5, car2.getPrice(), 0.01);
      assertEquals(4, car2.getSeats());
      assertEquals(65.0, car2.getSpeed(), 0.01);
      assertEquals("", car2.getOwner());
      assertEquals((-695.20130902), point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      String string0 = company0.pickVehicle(point2D_Double0);
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("\nN\u00FAmero de viagens : ", string0);
      assertNotNull(string0);
      assertEquals((-695.20130902), point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      double double0 = company0.getMoneyGenerated();
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Company company0 = new Company(">|N16oy c", ">|N16oy c");
      assertEquals(0, company0.getTotalTrips());
      assertEquals(">|N16oy c", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(">|N16oy c", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNotNull(company0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double(947.0328549633174, 0.0);
      assertNotNull(point2D_Double0);
      assertEquals(947.0328549633174, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      Helicopter helicopter0 = new Helicopter(">|N16oy c", 0.0, point2D_Double0, "3:MuuW-+");
      assertEquals(">|N16oy c", helicopter0.getLicencePlate());
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertTrue(helicopter0.isAvailable());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(0.0, helicopter0.getReliable(), 0.01);
      assertEquals("3:MuuW-+", helicopter0.getOwner());
      assertNotNull(helicopter0);
      assertEquals(947.0328549633174, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      Helicopter helicopter1 = new Helicopter(helicopter0);
      assertFalse(helicopter1.equals((Object)helicopter0));
      assertEquals(">|N16oy c", helicopter0.getLicencePlate());
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertTrue(helicopter0.isAvailable());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(0.0, helicopter0.getReliable(), 0.01);
      assertEquals("3:MuuW-+", helicopter0.getOwner());
      assertTrue(helicopter1.isAvailable());
      assertEquals(0.0, helicopter1.getReliable(), 0.01);
      assertEquals("3:MuuW-+", helicopter1.getOwner());
      assertEquals(110.0, helicopter1.getSpeed(), 0.01);
      assertEquals(3, helicopter1.getSeats());
      assertEquals(8.5, helicopter1.getPrice(), 0.01);
      assertEquals(">|N16oy c", helicopter1.getLicencePlate());
      assertNotNull(helicopter1);
      assertEquals(947.0328549633174, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      company0.addVehicle(helicopter1);
      assertNotSame(helicopter0, helicopter1);
      assertNotSame(helicopter1, helicopter0);
      assertFalse(helicopter0.equals((Object)helicopter1));
      assertFalse(helicopter1.equals((Object)helicopter0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals(">|N16oy c", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(">|N16oy c", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(">|N16oy c", helicopter0.getLicencePlate());
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertTrue(helicopter0.isAvailable());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(0.0, helicopter0.getReliable(), 0.01);
      assertEquals("3:MuuW-+", helicopter0.getOwner());
      assertTrue(helicopter1.isAvailable());
      assertEquals(0.0, helicopter1.getReliable(), 0.01);
      assertEquals("3:MuuW-+", helicopter1.getOwner());
      assertEquals(110.0, helicopter1.getSpeed(), 0.01);
      assertEquals(3, helicopter1.getSeats());
      assertEquals(8.5, helicopter1.getPrice(), 0.01);
      assertEquals(">|N16oy c", helicopter1.getLicencePlate());
      assertEquals(947.0328549633174, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      String string0 = company0.printVehicles();
      assertEquals(0, company0.getTotalTrips());
      assertEquals(">|N16oy c", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(">|N16oy c", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("null>|N16oy c\n", string0);
      assertNotNull(string0);
      
      Company company1 = company0.clone();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals(">|N16oy c", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(">|N16oy c", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(">|N16oy c", company1.getName());
      assertEquals(">|N16oy c", company1.getPassword());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertNotNull(company1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Company company0 = new Company("./s^=o K:~`A*dw", "./s^=o K:~`A*dw");
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertNotNull(company0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Driver driver0 = mock(Driver.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(driver0).isAvailable();
      doReturn("./s^=o K:~`A*dw").when(driver0).getEmail();
      Trip trip0 = new Trip();
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNotNull(trip0);
      
      boolean boolean1 = Boolean.getBoolean("./s^=o K:~`A*dw");
      assertFalse(boolean1);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Trip trip1 = mock(Trip.class, new ViolatedAssumptionAnswer());
      doReturn(trip0).when(trip1).clone();
      doReturn(0.0).when(trip1).distance();
      doReturn(double0, double1).when(trip1).getPrice();
      company0.addTrip(trip1);
      assertFalse(trip0.equals((Object)trip1));
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      
      Company company1 = company0.clone();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company1.getPoints());
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(1, company1.getTotalTrips());
      assertNotNull(company1);
      
      company0.addDriver(driver0);
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertFalse(boolean0.equals((Object)boolean1));
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      
      boolean boolean2 = company0.availiableTaxis();
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertFalse(boolean2 == boolean1);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertTrue(boolean2);
      
      double double2 = company1.getMoneyGenerated();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company1.getPoints());
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0.0, double2, 0.01);
      
      Point2D.Double point2D_Double0 = trip0.getEnd();
      assertFalse(trip0.equals((Object)trip1));
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      String string0 = company0.pickVehicle(point2D_Double0);
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertFalse(trip0.equals((Object)trip1));
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(string0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      String string1 = company1.getName();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company1.getPoints());
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(1, company1.getTotalTrips());
      assertEquals("./s^=o K:~`A*dw", string1);
      assertNotNull(string1);
      
      HashMap<String, Driver> hashMap0 = company1.getDrivers();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company1.getPoints());
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(1, company1.getTotalTrips());
      assertNotNull(hashMap0);
      
      System.setCurrentTimeMillis(1L);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(5636);
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      int int0 = company1.moneyGeneratedBetween(localDate0, localDate0);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company1.getPoints());
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Company company0 = new Company(",r$Te", ",r$Te");
      assertEquals(",r$Te", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertNotNull(company0);
      
      LocalDate localDate0 = MockLocalDate.of(4, 4, 4);
      assertNotNull(localDate0);
      
      Driver driver0 = new Driver(",r$Te", "WWbU]#", ",r$Te", "\nDinheiro gerado : ", localDate0, 4, "");
      assertEquals(0, driver0.getNumberOfTrips());
      assertEquals("", driver0.getCompany());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0, driver0.getExp());
      assertEquals("WWbU]#", driver0.getName());
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals(",r$Te", driver0.getEmail());
      assertEquals(0.0, driver0.getDeviation(), 0.01);
      assertEquals(0.0, driver0.getRating(), 0.01);
      assertEquals(0, driver0.getNumberOfReviews());
      assertEquals(",r$Te", driver0.getPassword());
      assertEquals(4.0, driver0.getTimeCompliance(), 0.01);
      assertTrue(driver0.isAvailable());
      assertEquals("\nDinheiro gerado : ", driver0.getAddress());
      assertNull(driver0.getVehicle());
      assertNotNull(driver0);
      
      ArrayList<String> arrayList0 = driver0.getDates();
      assertEquals(0, driver0.getNumberOfTrips());
      assertEquals("", driver0.getCompany());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0, driver0.getExp());
      assertEquals("WWbU]#", driver0.getName());
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals(",r$Te", driver0.getEmail());
      assertEquals(0.0, driver0.getDeviation(), 0.01);
      assertEquals(0.0, driver0.getRating(), 0.01);
      assertEquals(0, driver0.getNumberOfReviews());
      assertEquals(",r$Te", driver0.getPassword());
      assertEquals(4.0, driver0.getTimeCompliance(), 0.01);
      assertTrue(driver0.isAvailable());
      assertEquals("\nDinheiro gerado : ", driver0.getAddress());
      assertNull(driver0.getVehicle());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(",r$Te"));
      
      company0.addDriver(driver0);
      assertEquals(",r$Te", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0, driver0.getNumberOfTrips());
      assertEquals("", driver0.getCompany());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals(0, driver0.getExp());
      assertEquals("WWbU]#", driver0.getName());
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals(",r$Te", driver0.getEmail());
      assertEquals(0.0, driver0.getDeviation(), 0.01);
      assertEquals(0.0, driver0.getRating(), 0.01);
      assertEquals(0, driver0.getNumberOfReviews());
      assertEquals(",r$Te", driver0.getPassword());
      assertEquals(4.0, driver0.getTimeCompliance(), 0.01);
      assertTrue(driver0.isAvailable());
      assertEquals("\nDinheiro gerado : ", driver0.getAddress());
      assertNull(driver0.getVehicle());
      
      Company company1 = company0.clone();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(",r$Te", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(",r$Te", company1.getName());
      assertEquals(",r$Te", company1.getPassword());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getPoints());
      assertNotNull(company1);
      
      HashMap<String, Vehicle> hashMap0 = company1.getVehicles();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(",r$Te", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(",r$Te", company1.getName());
      assertEquals(",r$Te", company1.getPassword());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getPoints());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Company company2 = new Company(company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company2.equals((Object)company0));
      assertFalse(company2.equals((Object)company1));
      assertEquals(",r$Te", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company2.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company2.getName());
      assertEquals(0, company2.getTotalTrips());
      assertEquals(0, company2.getPoints());
      assertEquals(",r$Te", company2.getPassword());
      assertNotNull(company2);
      
      int int0 = company2.moneyGeneratedBetween((LocalDate) null, (LocalDate) null);
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertNotSame(company2, company0);
      assertNotSame(company2, company1);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertFalse(company2.equals((Object)company0));
      assertFalse(company2.equals((Object)company1));
      assertEquals(",r$Te", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company2.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company2.getName());
      assertEquals(0, company2.getTotalTrips());
      assertEquals(0, company2.getPoints());
      assertEquals(",r$Te", company2.getPassword());
      assertEquals(0, int0);
      
      String string0 = company2.printVehicles();
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertNotSame(company2, company0);
      assertNotSame(company2, company1);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertFalse(company2.equals((Object)company0));
      assertFalse(company2.equals((Object)company1));
      assertEquals(",r$Te", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company2.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company2.getName());
      assertEquals(0, company2.getTotalTrips());
      assertEquals(0, company2.getPoints());
      assertEquals(",r$Te", company2.getPassword());
      assertNull(string0);
      
      ArrayList<Trip> arrayList1 = company2.getTrips();
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertNotSame(company2, company0);
      assertNotSame(company2, company1);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertFalse(company2.equals((Object)company0));
      assertFalse(company2.equals((Object)company1));
      assertEquals(",r$Te", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company2.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company2.getName());
      assertEquals(0, company2.getTotalTrips());
      assertEquals(0, company2.getPoints());
      assertEquals(",r$Te", company2.getPassword());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      boolean boolean0 = company0.availiableTaxis();
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertEquals(",r$Te", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertTrue(boolean0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      point2D_Double0.y = 0.0;
      String string1 = company1.pickVehicle(point2D_Double0);
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertNotSame(company1, company2);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertFalse(company1.equals((Object)company2));
      assertEquals(",r$Te", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(",r$Te", company1.getName());
      assertEquals(",r$Te", company1.getPassword());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getPoints());
      assertNull(string1);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      int int1 = company2.moneyGeneratedBetween(localDate0, localDate0);
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertNotSame(company2, company0);
      assertNotSame(company2, company1);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertFalse(company2.equals((Object)company0));
      assertFalse(company2.equals((Object)company1));
      assertTrue(int1 == int0);
      assertEquals(",r$Te", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company2.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company2.getName());
      assertEquals(0, company2.getTotalTrips());
      assertEquals(0, company2.getPoints());
      assertEquals(",r$Te", company2.getPassword());
      assertEquals(0, int1);
      
      String string2 = company0.toString();
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertEquals(",r$Te", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("Empresa ,r$Te\n---Condutores \nnull,r$Te\n\n---Ve\u00EDculos \nnull\nN\u00FAmero de viagens : 0\nDinheiro gerado : 0.0\n", string2);
      assertNotNull(string2);
      
      String string3 = company2.toString();
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertNotSame(company2, company0);
      assertNotSame(company2, company1);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(company2.equals((Object)company0));
      assertFalse(company2.equals((Object)company1));
      assertEquals(",r$Te", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company2.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company2.getName());
      assertEquals(0, company2.getTotalTrips());
      assertEquals(0, company2.getPoints());
      assertEquals(",r$Te", company2.getPassword());
      assertEquals("Empresa ,r$Te\n---Condutores \nnull,r$Te\n\n---Ve\u00EDculos \nnull\nN\u00FAmero de viagens : 0\nDinheiro gerado : 0.0\n", string3);
      assertNotNull(string3);
      
      int int2 = company0.getTotalTrips();
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(",r$Te", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Company company0 = new Company("\n", "D");
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("D", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("\n", company0.getName());
      assertNotNull(company0);
      
      double double0 = company0.getMoneyGenerated();
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("D", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("\n", company0.getName());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Company company0 = new Company("\nPre\u00E7o : ", "\nPre\u00E7o : ");
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nPre\u00E7o : ", company0.getPassword());
      assertEquals("\nPre\u00E7o : ", company0.getName());
      assertNotNull(company0);
      
      HashMap<String, Driver> hashMap0 = company0.getDrivers();
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nPre\u00E7o : ", company0.getPassword());
      assertEquals("\nPre\u00E7o : ", company0.getName());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = company0.getName();
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nPre\u00E7o : ", company0.getPassword());
      assertEquals("\nPre\u00E7o : ", company0.getName());
      assertEquals("\nPre\u00E7o : ", string0);
      assertNotNull(string0);
      
      Company company1 = new Company("\nPre\u00E7o : ", "-WID8[O+d8gQ");
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company1.getPoints());
      assertEquals("-WID8[O+d8gQ", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("\nPre\u00E7o : ", company1.getName());
      assertEquals(0, company1.getTotalTrips());
      assertNotNull(company1);
      
      ArrayList<String> arrayList0 = company1.getDates();
      assertNotSame(company1, company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company1.getPoints());
      assertEquals("-WID8[O+d8gQ", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("\nPre\u00E7o : ", company1.getName());
      assertEquals(0, company1.getTotalTrips());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("\nPre\u00E7o : "));
      
      boolean boolean0 = company0.equals(company1);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nPre\u00E7o : ", company0.getPassword());
      assertEquals("\nPre\u00E7o : ", company0.getName());
      assertEquals(0, company1.getPoints());
      assertEquals("-WID8[O+d8gQ", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("\nPre\u00E7o : ", company1.getName());
      assertEquals(0, company1.getTotalTrips());
      assertTrue(boolean0);
      
      int int0 = company1.getPoints();
      assertNotSame(company1, company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company1.getPoints());
      assertEquals("-WID8[O+d8gQ", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("\nPre\u00E7o : ", company1.getName());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Company company0 = new Company("&#", "");
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals("&#", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertNotNull(company0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double(3, 3);
      assertNotNull(point2D_Double0);
      assertEquals(3.0, point2D_Double0.x, 0.01);
      assertEquals(3.0, point2D_Double0.y, 0.01);
      
      Point2D.Double point2D_Double1 = new Point2D.Double();
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertNotNull(point2D_Double1);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(3, point2D_Double0, point2D_Double1, double0, (Double) 0.0, localDate0, "", "", "", 3, 1.0, point2D_Double0, 3, (-1844.766012), 0.0);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals((-1844.766012), trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(3, trip0.getID());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(3, trip0.getRating());
      assertEquals(1.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(3.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertNotNull(trip0);
      assertEquals(3.0, point2D_Double0.x, 0.01);
      assertEquals(3.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      
      Trip trip1 = new Trip(trip0);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertFalse(trip1.equals((Object)trip0));
      assertEquals((-1844.766012), trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(3, trip0.getID());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(3, trip0.getRating());
      assertEquals(1.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(3.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, trip1.getTime(), 0.01);
      assertEquals((-1844.766012), trip1.getRealTimeToClient(), 0.01);
      assertEquals(3, trip1.getID());
      assertEquals(1.0, trip1.getEstimatedTimeToDest(), 0.01);
      assertEquals(3.0, trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip1.getEstimatedPrice(), 0.01);
      assertEquals("", trip1.getLicencePlate());
      assertEquals(0.0, trip1.getPrice(), 0.01);
      assertEquals(3, trip1.getRating());
      assertEquals("", trip1.getDriver());
      assertEquals("", trip1.getClient());
      assertNotNull(trip1);
      assertEquals(3.0, point2D_Double0.x, 0.01);
      assertEquals(3.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      
      company0.addTrip(trip1);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(trip0, trip1);
      assertNotSame(trip1, trip0);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertFalse(trip0.equals((Object)trip1));
      assertFalse(trip1.equals((Object)trip0));
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals("&#", company0.getName());
      assertEquals((-4), company0.getPoints());
      assertEquals(1, company0.getTotalTrips());
      assertEquals((-1844.766012), trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(3, trip0.getID());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(3, trip0.getRating());
      assertEquals(1.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(3.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, trip1.getTime(), 0.01);
      assertEquals((-1844.766012), trip1.getRealTimeToClient(), 0.01);
      assertEquals(3, trip1.getID());
      assertEquals(1.0, trip1.getEstimatedTimeToDest(), 0.01);
      assertEquals(3.0, trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip1.getEstimatedPrice(), 0.01);
      assertEquals("", trip1.getLicencePlate());
      assertEquals(0.0, trip1.getPrice(), 0.01);
      assertEquals(3, trip1.getRating());
      assertEquals("", trip1.getDriver());
      assertEquals("", trip1.getClient());
      assertEquals(3.0, point2D_Double0.x, 0.01);
      assertEquals(3.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      
      HashMap<String, Driver> hashMap0 = company0.getDrivers();
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals("&#", company0.getName());
      assertEquals((-4), company0.getPoints());
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Company company1 = company0.clone();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals("&#", company0.getName());
      assertEquals((-4), company0.getPoints());
      assertEquals(1, company0.getTotalTrips());
      assertEquals("&#", company1.getName());
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals((-4), company1.getPoints());
      assertEquals("", company1.getPassword());
      assertNotNull(company1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Company company0 = new Company("\nN\u00FAmero de viagens : ", "0xin;`Uo$");
      assertEquals("0xin;`Uo$", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nN\u00FAmero de viagens : ", company0.getName());
      assertNotNull(company0);
      
      Company company1 = company0.clone();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals("0xin;`Uo$", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\nN\u00FAmero de viagens : ", company0.getName());
      assertEquals(0, company1.getTotalTrips());
      assertEquals("0xin;`Uo$", company1.getPassword());
      assertEquals(0, company1.getPoints());
      assertEquals("\nN\u00FAmero de viagens : ", company1.getName());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertNotNull(company1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Company company0 = new Company("RS_X^-vO`6AMrX0y", "RS_X^-vO`6AMrX0y");
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertNotNull(company0);
      
      boolean boolean0 = company0.availiableTaxis();
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertFalse(boolean0);
      
      Company company1 = new Company(company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("RS_X^-vO`6AMrX0y", company1.getName());
      assertEquals("RS_X^-vO`6AMrX0y", company1.getPassword());
      assertNotNull(company1);
      
      Trip trip0 = new Trip();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getLicencePlate());
      assertNull(trip0.getDriver());
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNotNull(trip0);
      
      company1.addTrip(trip0);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("RS_X^-vO`6AMrX0y", company1.getName());
      assertEquals("RS_X^-vO`6AMrX0y", company1.getPassword());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getLicencePlate());
      assertNull(trip0.getDriver());
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      
      Trip trip1 = new Trip();
      assertFalse(trip1.equals((Object)trip0));
      assertEquals(0.0, trip1.getEstimatedTimeToClient(), 0.01);
      assertNull(trip1.getClient());
      assertNull(trip1.getDriver());
      assertEquals(0.0, trip1.getRealTimeToClient(), 0.01);
      assertEquals(0, trip1.getID());
      assertEquals(0.0, trip1.getTime(), 0.01);
      assertEquals(0, trip1.getRating());
      assertNull(trip1.getLicencePlate());
      assertEquals(0.0, trip1.getPrice(), 0.01);
      assertEquals(0.0, trip1.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip1.getEstimatedTimeToDest(), 0.01);
      assertNotNull(trip1);
      
      company1.addTrip(trip1);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertNotSame(trip1, trip0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertFalse(trip1.equals((Object)trip0));
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(2, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("RS_X^-vO`6AMrX0y", company1.getName());
      assertEquals("RS_X^-vO`6AMrX0y", company1.getPassword());
      assertEquals(0.0, trip1.getEstimatedTimeToClient(), 0.01);
      assertNull(trip1.getClient());
      assertNull(trip1.getDriver());
      assertEquals(0.0, trip1.getRealTimeToClient(), 0.01);
      assertEquals(0, trip1.getID());
      assertEquals(0.0, trip1.getTime(), 0.01);
      assertEquals(0, trip1.getRating());
      assertNull(trip1.getLicencePlate());
      assertEquals(0.0, trip1.getPrice(), 0.01);
      assertEquals(0.0, trip1.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip1.getEstimatedTimeToDest(), 0.01);
      
      HashMap<String, Driver> hashMap0 = company0.getDrivers();
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ArrayList<String> arrayList0 = company1.getDates();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(2, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("RS_X^-vO`6AMrX0y", company1.getName());
      assertEquals("RS_X^-vO`6AMrX0y", company1.getPassword());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("RS_X^-vO`6AMrX0y"));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Company company0 = new Company("./s^=o K:~`A*dw", "./s^=o K:~`A*dw");
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertNotNull(company0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Driver driver0 = mock(Driver.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(driver0).isAvailable();
      doReturn("./s^=o K:~`A*dw").when(driver0).getEmail();
      Trip trip0 = new Trip();
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNotNull(trip0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      boolean boolean1 = Boolean.getBoolean("Z1e}!#/Yi0%kvT");
      assertFalse(boolean1);
      
      Trip trip1 = mock(Trip.class, new ViolatedAssumptionAnswer());
      doReturn(trip0).when(trip1).clone();
      doReturn(0.0).when(trip1).distance();
      doReturn((LocalDate) null).when(trip1).getDate();
      doReturn(double0, double1).when(trip1).getPrice();
      company0.addTrip(trip1);
      assertFalse(trip0.equals((Object)trip1));
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      
      Company company1 = company0.clone();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0, company1.getPoints());
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals(1, company1.getTotalTrips());
      assertNotNull(company1);
      
      company0.addDriver(driver0);
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertFalse(boolean0.equals((Object)boolean1));
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      
      boolean boolean2 = company0.availiableTaxis();
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertFalse(boolean2 == boolean1);
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertTrue(boolean2);
      
      double double2 = company1.getMoneyGenerated();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0, company1.getPoints());
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0.0, double2, 0.01);
      
      Point2D.Double point2D_Double0 = trip0.getEnd();
      assertFalse(trip0.equals((Object)trip1));
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      String string0 = company0.pickVehicle(point2D_Double0);
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertFalse(trip0.equals((Object)trip1));
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(string0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      String string1 = company1.getName();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0, company1.getPoints());
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals(1, company1.getTotalTrips());
      assertEquals("./s^=o K:~`A*dw", string1);
      assertNotNull(string1);
      
      HashMap<String, Driver> hashMap0 = company1.getDrivers();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company0.getName());
      assertEquals("./s^=o K:~`A*dw", company0.getPassword());
      assertEquals(0, company1.getPoints());
      assertEquals("./s^=o K:~`A*dw", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("./s^=o K:~`A*dw", company1.getName());
      assertEquals(1, company1.getTotalTrips());
      assertNotNull(hashMap0);
      
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        company0.moneyGeneratedBetween((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Company company0 = new Company("", "");
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNotNull(company0);
      
      Company company1 = new Company(company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertEquals("", company1.getPassword());
      assertEquals("", company1.getName());
      assertNotNull(company1);
      
      Trip trip0 = new Trip();
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNotNull(trip0);
      
      LocalDate localDate0 = trip0.getDate();
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNotNull(localDate0);
      
      Point2D.Double point2D_Double0 = trip0.getEnd();
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      LocalDate localDate1 = trip0.getDate();
      assertNotSame(localDate1, localDate0);
      assertTrue(localDate1.equals((Object)localDate0));
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNotNull(localDate1);
      
      Point2D.Double point2D_Double1 = trip0.getEnd();
      assertNotSame(point2D_Double1, point2D_Double0);
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNotNull(point2D_Double1);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      
      company1.addTrip(trip0);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getPoints());
      assertEquals(1, company1.getTotalTrips());
      assertEquals("", company1.getPassword());
      assertEquals("", company1.getName());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      
      String string0 = company1.pickDriver();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getPoints());
      assertEquals(1, company1.getTotalTrips());
      assertEquals("", company1.getPassword());
      assertEquals("", company1.getName());
      assertNull(string0);
      
      boolean boolean0 = company1.availiableTaxis();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getPoints());
      assertEquals(1, company1.getTotalTrips());
      assertEquals("", company1.getPassword());
      assertEquals("", company1.getName());
      assertFalse(boolean0);
      
      Point2D.Double point2D_Double2 = new Point2D.Double();
      assertTrue(point2D_Double2.equals((Object)point2D_Double0));
      assertTrue(point2D_Double2.equals((Object)point2D_Double1));
      assertNotNull(point2D_Double2);
      assertEquals(0.0, point2D_Double2.x, 0.01);
      assertEquals(0.0, point2D_Double2.y, 0.01);
      
      point2D_Double2.y = 0.0;
      point2D_Double2.y = 0.0;
      Point2D.Double point2D_Double3 = (Point2D.Double)point2D_Double2.clone();
      assertNotSame(point2D_Double2, point2D_Double0);
      assertNotSame(point2D_Double2, point2D_Double1);
      assertNotSame(point2D_Double2, point2D_Double3);
      assertNotSame(point2D_Double3, point2D_Double0);
      assertNotSame(point2D_Double3, point2D_Double2);
      assertNotSame(point2D_Double3, point2D_Double1);
      assertTrue(point2D_Double2.equals((Object)point2D_Double0));
      assertTrue(point2D_Double2.equals((Object)point2D_Double1));
      assertTrue(point2D_Double3.equals((Object)point2D_Double2));
      assertTrue(point2D_Double3.equals((Object)point2D_Double1));
      assertTrue(point2D_Double3.equals((Object)point2D_Double0));
      assertNotNull(point2D_Double3);
      assertEquals(0.0, point2D_Double2.x, 0.01);
      assertEquals(0.0, point2D_Double2.y, 0.01);
      assertEquals(0.0, point2D_Double3.x, 0.01);
      assertEquals(0.0, point2D_Double3.y, 0.01);
      
      int int0 = company1.moneyGeneratedBetween(localDate0, localDate0);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertNotSame(localDate0, localDate1);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertTrue(localDate0.equals((Object)localDate1));
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getPoints());
      assertEquals(1, company1.getTotalTrips());
      assertEquals("", company1.getPassword());
      assertEquals("", company1.getName());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, int0);
      
      String string1 = company0.pickVehicle(point2D_Double2);
      assertNotSame(company0, company1);
      assertNotSame(point2D_Double2, point2D_Double0);
      assertNotSame(point2D_Double2, point2D_Double1);
      assertNotSame(point2D_Double2, point2D_Double3);
      assertFalse(company0.equals((Object)company1));
      assertTrue(point2D_Double2.equals((Object)point2D_Double3));
      assertTrue(point2D_Double2.equals((Object)point2D_Double0));
      assertTrue(point2D_Double2.equals((Object)point2D_Double1));
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNull(string1);
      assertEquals(0.0, point2D_Double2.x, 0.01);
      assertEquals(0.0, point2D_Double2.y, 0.01);
      
      // Undeclared exception!
      try { 
        company1.getTrips();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Company company0 = new Company("N#", "N#");
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("N#", company0.getName());
      assertEquals("N#", company0.getPassword());
      assertNotNull(company0);
      
      HashMap<String, Vehicle> hashMap0 = company0.getVehicles();
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("N#", company0.getName());
      assertEquals("N#", company0.getPassword());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = company0.moneyGeneratedBetween((LocalDate) null, (LocalDate) null);
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("N#", company0.getName());
      assertEquals("N#", company0.getPassword());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Company company0 = new Company("", "");
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNotNull(company0);
      
      Trip trip0 = new Trip();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertNotNull(trip0);
      
      Point2D.Double point2D_Double0 = trip0.getEnd();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      String string0 = company0.pickVehicle(point2D_Double0);
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertNull(string0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      HashMap<String, Vehicle> hashMap0 = company0.getVehicles();
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = company0.getTotalTrips();
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Company company0 = new Company("\n---Ve\u00EDculos \n", "\n---Ve\u00EDculos \n");
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\n---Ve\u00EDculos \n", company0.getName());
      assertEquals("\n---Ve\u00EDculos \n", company0.getPassword());
      assertNotNull(company0);
      
      ArrayList<String> arrayList0 = company0.getDates();
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\n---Ve\u00EDculos \n", company0.getName());
      assertEquals("\n---Ve\u00EDculos \n", company0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("\n---Ve\u00EDculos \n"));
      
      String string0 = company0.pickDriver();
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\n---Ve\u00EDculos \n", company0.getName());
      assertEquals("\n---Ve\u00EDculos \n", company0.getPassword());
      assertNull(string0);
      
      String string1 = company0.toString();
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\n---Ve\u00EDculos \n", company0.getName());
      assertEquals("\n---Ve\u00EDculos \n", company0.getPassword());
      assertEquals("Empresa \n---Ve\u00EDculos \n\n---Condutores \nnull\n---Ve\u00EDculos \nnull\nN\u00FAmero de viagens : 0\nDinheiro gerado : 0.0\n", string1);
      assertNotNull(string1);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      assertNotNull(localDate0);
      
      Driver driver0 = new Driver("\n---Ve\u00EDculos \n", "\n---Ve\u00EDculos \n", "", (String) null, localDate0, (-1L), "");
      assertEquals("\n---Ve\u00EDculos \n", driver0.getName());
      assertEquals((-1.0), driver0.getTimeCompliance(), 0.01);
      assertEquals(0.0, driver0.getRating(), 0.01);
      assertEquals("", driver0.getPassword());
      assertEquals("", driver0.getCompany());
      assertTrue(driver0.isAvailable());
      assertNull(driver0.getVehicle());
      assertEquals(0, driver0.getNumberOfTrips());
      assertEquals(0, driver0.getNumberOfReviews());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertNull(driver0.getAddress());
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals(0, driver0.getExp());
      assertEquals("\n---Ve\u00EDculos \n", driver0.getEmail());
      assertEquals(0.0, driver0.getDeviation(), 0.01);
      assertNotNull(driver0);
      
      Driver driver1 = driver0.clone();
      assertNotSame(driver0, driver1);
      assertNotSame(driver1, driver0);
      assertFalse(driver1.equals((Object)driver0));
      assertEquals("\n---Ve\u00EDculos \n", driver0.getName());
      assertEquals((-1.0), driver0.getTimeCompliance(), 0.01);
      assertEquals(0.0, driver0.getRating(), 0.01);
      assertEquals("", driver0.getPassword());
      assertEquals("", driver0.getCompany());
      assertTrue(driver0.isAvailable());
      assertNull(driver0.getVehicle());
      assertEquals(0, driver0.getNumberOfTrips());
      assertEquals(0, driver0.getNumberOfReviews());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertNull(driver0.getAddress());
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals(0, driver0.getExp());
      assertEquals("\n---Ve\u00EDculos \n", driver0.getEmail());
      assertEquals(0.0, driver0.getDeviation(), 0.01);
      assertEquals(0.0, driver1.getMoney(), 0.01);
      assertNull(driver1.getAddress());
      assertEquals(0.0, driver1.getDeviation(), 0.01);
      assertEquals("\n---Ve\u00EDculos \n", driver1.getEmail());
      assertEquals(0, driver1.getExp());
      assertEquals(0.0, driver1.getRating(), 0.01);
      assertTrue(driver1.isAvailable());
      assertEquals("\n---Ve\u00EDculos \n", driver1.getName());
      assertEquals(0, driver1.getNumberOfReviews());
      assertNull(driver1.getVehicle());
      assertEquals("", driver1.getCompany());
      assertEquals(0, driver1.getNumberOfTrips());
      assertEquals(0.0, driver1.getTotalDistance(), 0.01);
      assertEquals((-1.0), driver1.getTimeCompliance(), 0.01);
      assertEquals("", driver1.getPassword());
      assertNotNull(driver1);
      
      Driver driver2 = new Driver(driver1);
      assertFalse(driver0.equals((Object)driver1));
      assertFalse(driver1.equals((Object)driver0));
      assertFalse(driver2.equals((Object)driver0));
      assertFalse(driver2.equals((Object)driver1));
      assertEquals("\n---Ve\u00EDculos \n", driver0.getName());
      assertEquals((-1.0), driver0.getTimeCompliance(), 0.01);
      assertEquals(0.0, driver0.getRating(), 0.01);
      assertEquals("", driver0.getPassword());
      assertEquals("", driver0.getCompany());
      assertTrue(driver0.isAvailable());
      assertNull(driver0.getVehicle());
      assertEquals(0, driver0.getNumberOfTrips());
      assertEquals(0, driver0.getNumberOfReviews());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertNull(driver0.getAddress());
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals(0, driver0.getExp());
      assertEquals("\n---Ve\u00EDculos \n", driver0.getEmail());
      assertEquals(0.0, driver0.getDeviation(), 0.01);
      assertEquals(0.0, driver1.getMoney(), 0.01);
      assertNull(driver1.getAddress());
      assertEquals(0.0, driver1.getDeviation(), 0.01);
      assertEquals("\n---Ve\u00EDculos \n", driver1.getEmail());
      assertEquals(0, driver1.getExp());
      assertEquals(0.0, driver1.getRating(), 0.01);
      assertTrue(driver1.isAvailable());
      assertEquals("\n---Ve\u00EDculos \n", driver1.getName());
      assertEquals(0, driver1.getNumberOfReviews());
      assertNull(driver1.getVehicle());
      assertEquals("", driver1.getCompany());
      assertEquals(0, driver1.getNumberOfTrips());
      assertEquals(0.0, driver1.getTotalDistance(), 0.01);
      assertEquals((-1.0), driver1.getTimeCompliance(), 0.01);
      assertEquals("", driver1.getPassword());
      assertEquals(0, driver2.getNumberOfReviews());
      assertEquals("", driver2.getPassword());
      assertEquals("\n---Ve\u00EDculos \n", driver2.getName());
      assertNull(driver2.getAddress());
      assertNull(driver2.getVehicle());
      assertEquals(0.0, driver2.getMoney(), 0.01);
      assertEquals("\n---Ve\u00EDculos \n", driver2.getEmail());
      assertEquals(0.0, driver2.getDeviation(), 0.01);
      assertEquals(0.0, driver2.getTotalDistance(), 0.01);
      assertEquals((-1.0), driver2.getTimeCompliance(), 0.01);
      assertEquals(0, driver2.getExp());
      assertEquals("", driver2.getCompany());
      assertEquals(0, driver2.getNumberOfTrips());
      assertTrue(driver2.isAvailable());
      assertEquals(0.0, driver2.getRating(), 0.01);
      assertNotNull(driver2);
      
      company0.addDriver(driver2);
      assertNotSame(driver0, driver2);
      assertNotSame(driver0, driver1);
      assertNotSame(driver1, driver2);
      assertNotSame(driver1, driver0);
      assertNotSame(driver2, driver0);
      assertNotSame(driver2, driver1);
      assertFalse(driver0.equals((Object)driver2));
      assertFalse(driver0.equals((Object)driver1));
      assertFalse(driver1.equals((Object)driver2));
      assertFalse(driver1.equals((Object)driver0));
      assertFalse(driver2.equals((Object)driver0));
      assertFalse(driver2.equals((Object)driver1));
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("\n---Ve\u00EDculos \n", company0.getName());
      assertEquals("\n---Ve\u00EDculos \n", company0.getPassword());
      assertEquals("\n---Ve\u00EDculos \n", driver0.getName());
      assertEquals((-1.0), driver0.getTimeCompliance(), 0.01);
      assertEquals(0.0, driver0.getRating(), 0.01);
      assertEquals("", driver0.getPassword());
      assertEquals("", driver0.getCompany());
      assertTrue(driver0.isAvailable());
      assertNull(driver0.getVehicle());
      assertEquals(0, driver0.getNumberOfTrips());
      assertEquals(0, driver0.getNumberOfReviews());
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertNull(driver0.getAddress());
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals(0, driver0.getExp());
      assertEquals("\n---Ve\u00EDculos \n", driver0.getEmail());
      assertEquals(0.0, driver0.getDeviation(), 0.01);
      assertEquals(0.0, driver1.getMoney(), 0.01);
      assertNull(driver1.getAddress());
      assertEquals(0.0, driver1.getDeviation(), 0.01);
      assertEquals("\n---Ve\u00EDculos \n", driver1.getEmail());
      assertEquals(0, driver1.getExp());
      assertEquals(0.0, driver1.getRating(), 0.01);
      assertTrue(driver1.isAvailable());
      assertEquals("\n---Ve\u00EDculos \n", driver1.getName());
      assertEquals(0, driver1.getNumberOfReviews());
      assertNull(driver1.getVehicle());
      assertEquals("", driver1.getCompany());
      assertEquals(0, driver1.getNumberOfTrips());
      assertEquals(0.0, driver1.getTotalDistance(), 0.01);
      assertEquals((-1.0), driver1.getTimeCompliance(), 0.01);
      assertEquals("", driver1.getPassword());
      assertEquals(0, driver2.getNumberOfReviews());
      assertEquals("", driver2.getPassword());
      assertEquals("\n---Ve\u00EDculos \n", driver2.getName());
      assertNull(driver2.getAddress());
      assertNull(driver2.getVehicle());
      assertEquals(0.0, driver2.getMoney(), 0.01);
      assertEquals("\n---Ve\u00EDculos \n", driver2.getEmail());
      assertEquals(0.0, driver2.getDeviation(), 0.01);
      assertEquals(0.0, driver2.getTotalDistance(), 0.01);
      assertEquals((-1.0), driver2.getTimeCompliance(), 0.01);
      assertEquals(0, driver2.getExp());
      assertEquals("", driver2.getCompany());
      assertEquals(0, driver2.getNumberOfTrips());
      assertTrue(driver2.isAvailable());
      assertEquals(0.0, driver2.getRating(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Company company0 = new Company("umer.Driver \n", "umer.Driver \n");
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals("umer.Driver \n", company0.getName());
      assertEquals("umer.Driver \n", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertNotNull(company0);
      
      Company company1 = new Company(company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals("umer.Driver \n", company0.getName());
      assertEquals("umer.Driver \n", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("umer.Driver \n", company1.getPassword());
      assertEquals("umer.Driver \n", company1.getName());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getPoints());
      assertNotNull(company1);
      
      // Undeclared exception!
      try { 
        company1.addDriver((Driver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Company company0 = new Company("RS_X^-vO`6AMrX0y", "RS_X^-vO`6AMrX0y");
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertNotNull(company0);
      
      boolean boolean0 = company0.availiableTaxis();
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertFalse(boolean0);
      
      Company company1 = new Company(company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("RS_X^-vO`6AMrX0y", company1.getName());
      assertEquals(0, company1.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company1.getPassword());
      assertNotNull(company1);
      
      Trip trip0 = new Trip();
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getDriver());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNotNull(trip0);
      
      company1.addTrip(trip0);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("RS_X^-vO`6AMrX0y", company1.getName());
      assertEquals(0, company1.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company1.getPassword());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getDriver());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      
      HashMap<String, Driver> hashMap0 = company0.getDrivers();
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ArrayList<String> arrayList0 = company1.getDates();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("RS_X^-vO`6AMrX0y", company1.getName());
      assertEquals(0, company1.getPoints());
      assertEquals("RS_X^-vO`6AMrX0y", company1.getPassword());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("RS_X^-vO`6AMrX0y"));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Company company0 = new Company("", "");
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertNotNull(company0);
      
      String string0 = company0.toString();
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("Empresa \n---Condutores \nnull\n---Ve\u00EDculos \nnull\nN\u00FAmero de viagens : 0\nDinheiro gerado : 0.0\n", string0);
      assertNotNull(string0);
      
      ArrayList<String> arrayList0 = company0.getDates();
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Company company0 = new Company("RS_X^-vO`6AMrX0y", "RS_X^-vO`6AMrX0y");
      assertEquals(0, company0.getTotalTrips());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNotNull(company0);
      
      Company company1 = new Company(company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getTotalTrips());
      assertEquals("RS_X^-vO`6AMrX0y", company1.getName());
      assertEquals("RS_X^-vO`6AMrX0y", company1.getPassword());
      assertEquals(0, company1.getPoints());
      assertNotNull(company1);
      
      Trip trip0 = new Trip();
      assertNull(trip0.getDriver());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNotNull(trip0);
      
      String string0 = company1.pickDriver();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getTotalTrips());
      assertEquals("RS_X^-vO`6AMrX0y", company1.getName());
      assertEquals("RS_X^-vO`6AMrX0y", company1.getPassword());
      assertEquals(0, company1.getPoints());
      assertNull(string0);
      
      company1.addTrip(trip0);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getPassword());
      assertEquals("RS_X^-vO`6AMrX0y", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(1, company1.getTotalTrips());
      assertEquals("RS_X^-vO`6AMrX0y", company1.getName());
      assertEquals("RS_X^-vO`6AMrX0y", company1.getPassword());
      assertEquals(0, company1.getPoints());
      assertNull(trip0.getDriver());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      
      // Undeclared exception!
      try { 
        company1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Company company0 = new Company("", "");
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNotNull(company0);
      
      Company company1 = new Company(company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company1.getPassword());
      assertEquals("", company1.getName());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertNotNull(company1);
      
      boolean boolean0 = company1.availiableTaxis();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company1.getPassword());
      assertEquals("", company1.getName());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Company company0 = new Company("", "");
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertNotNull(company0);
      
      Company company1 = new Company(company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals("", company1.getPassword());
      assertEquals("", company1.getName());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertNotNull(company1);
      
      String string0 = company1.getPassword();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getName());
      assertEquals("", company0.getPassword());
      assertEquals("", company1.getPassword());
      assertEquals("", company1.getName());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Company company0 = new Company(",r$Te", ",r$Te");
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(",r$Te", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNotNull(company0);
      
      LocalDate localDate0 = MockLocalDate.of(4, 4, 4);
      assertNotNull(localDate0);
      
      Driver driver0 = new Driver(",r$Te", "**", ",r$Te", "\nDinheiro gerado : ", localDate0, 4, "");
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals("", driver0.getCompany());
      assertEquals(",r$Te", driver0.getEmail());
      assertEquals(0, driver0.getNumberOfTrips());
      assertEquals("**", driver0.getName());
      assertEquals(4.0, driver0.getTimeCompliance(), 0.01);
      assertEquals(",r$Te", driver0.getPassword());
      assertEquals(0.0, driver0.getDeviation(), 0.01);
      assertEquals(0, driver0.getNumberOfReviews());
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals(0, driver0.getExp());
      assertEquals(0.0, driver0.getRating(), 0.01);
      assertTrue(driver0.isAvailable());
      assertEquals("\nDinheiro gerado : ", driver0.getAddress());
      assertNull(driver0.getVehicle());
      assertNotNull(driver0);
      
      ArrayList<String> arrayList0 = driver0.getDates();
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals("", driver0.getCompany());
      assertEquals(",r$Te", driver0.getEmail());
      assertEquals(0, driver0.getNumberOfTrips());
      assertEquals("**", driver0.getName());
      assertEquals(4.0, driver0.getTimeCompliance(), 0.01);
      assertEquals(",r$Te", driver0.getPassword());
      assertEquals(0.0, driver0.getDeviation(), 0.01);
      assertEquals(0, driver0.getNumberOfReviews());
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals(0, driver0.getExp());
      assertEquals(0.0, driver0.getRating(), 0.01);
      assertTrue(driver0.isAvailable());
      assertEquals("\nDinheiro gerado : ", driver0.getAddress());
      assertNull(driver0.getVehicle());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(",r$Te"));
      
      company0.addDriver(driver0);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(",r$Te", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, driver0.getTotalDistance(), 0.01);
      assertEquals("", driver0.getCompany());
      assertEquals(",r$Te", driver0.getEmail());
      assertEquals(0, driver0.getNumberOfTrips());
      assertEquals("**", driver0.getName());
      assertEquals(4.0, driver0.getTimeCompliance(), 0.01);
      assertEquals(",r$Te", driver0.getPassword());
      assertEquals(0.0, driver0.getDeviation(), 0.01);
      assertEquals(0, driver0.getNumberOfReviews());
      assertEquals(0.0, driver0.getMoney(), 0.01);
      assertEquals(0, driver0.getExp());
      assertEquals(0.0, driver0.getRating(), 0.01);
      assertTrue(driver0.isAvailable());
      assertEquals("\nDinheiro gerado : ", driver0.getAddress());
      assertNull(driver0.getVehicle());
      
      Company company1 = company0.clone();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(",r$Te", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company1.getName());
      assertEquals(",r$Te", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertNotNull(company1);
      
      HashMap<String, Vehicle> hashMap0 = company1.getVehicles();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(",r$Te", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company1.getName());
      assertEquals(",r$Te", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Company company2 = new Company(company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company2.equals((Object)company1));
      assertFalse(company2.equals((Object)company0));
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(",r$Te", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company2.getPoints());
      assertEquals(0, company2.getTotalTrips());
      assertEquals(",r$Te", company2.getName());
      assertEquals(",r$Te", company2.getPassword());
      assertEquals(0.0, company2.getMoneyGenerated(), 0.01);
      assertNotNull(company2);
      
      int int0 = company2.moneyGeneratedBetween((LocalDate) null, (LocalDate) null);
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertNotSame(company2, company1);
      assertNotSame(company2, company0);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertFalse(company2.equals((Object)company1));
      assertFalse(company2.equals((Object)company0));
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(",r$Te", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company2.getPoints());
      assertEquals(0, company2.getTotalTrips());
      assertEquals(",r$Te", company2.getName());
      assertEquals(",r$Te", company2.getPassword());
      assertEquals(0.0, company2.getMoneyGenerated(), 0.01);
      assertEquals(0, int0);
      
      String string0 = company2.printVehicles();
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertNotSame(company2, company1);
      assertNotSame(company2, company0);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertFalse(company2.equals((Object)company1));
      assertFalse(company2.equals((Object)company0));
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(",r$Te", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company2.getPoints());
      assertEquals(0, company2.getTotalTrips());
      assertEquals(",r$Te", company2.getName());
      assertEquals(",r$Te", company2.getPassword());
      assertEquals(0.0, company2.getMoneyGenerated(), 0.01);
      assertNull(string0);
      
      ArrayList<Trip> arrayList1 = company2.getTrips();
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertNotSame(company2, company1);
      assertNotSame(company2, company0);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertFalse(company2.equals((Object)company1));
      assertFalse(company2.equals((Object)company0));
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(",r$Te", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company2.getPoints());
      assertEquals(0, company2.getTotalTrips());
      assertEquals(",r$Te", company2.getName());
      assertEquals(",r$Te", company2.getPassword());
      assertEquals(0.0, company2.getMoneyGenerated(), 0.01);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      boolean boolean0 = company0.availiableTaxis();
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(",r$Te", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertTrue(boolean0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      point2D_Double0.y = 0.0;
      String string1 = company1.pickVehicle(point2D_Double0);
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertNotSame(company1, company2);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertFalse(company1.equals((Object)company2));
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(",r$Te", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(",r$Te", company1.getName());
      assertEquals(",r$Te", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertNull(string1);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      int int1 = company2.moneyGeneratedBetween(localDate0, localDate0);
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertNotSame(company2, company1);
      assertNotSame(company2, company0);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertFalse(company2.equals((Object)company1));
      assertFalse(company2.equals((Object)company0));
      assertTrue(int1 == int0);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(",r$Te", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company2.getPoints());
      assertEquals(0, company2.getTotalTrips());
      assertEquals(",r$Te", company2.getName());
      assertEquals(",r$Te", company2.getPassword());
      assertEquals(0.0, company2.getMoneyGenerated(), 0.01);
      assertEquals(0, int1);
      
      String string2 = company0.toString();
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(",r$Te", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("Empresa ,r$Te\n---Condutores \nnull,r$Te\n\n---Ve\u00EDculos \nnull\nN\u00FAmero de viagens : 0\nDinheiro gerado : 0.0\n", string2);
      assertNotNull(string2);
      
      String string3 = company2.toString();
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertNotSame(company2, company1);
      assertNotSame(company2, company0);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(company2.equals((Object)company1));
      assertFalse(company2.equals((Object)company0));
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(",r$Te", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company2.getPoints());
      assertEquals(0, company2.getTotalTrips());
      assertEquals(",r$Te", company2.getName());
      assertEquals(",r$Te", company2.getPassword());
      assertEquals(0.0, company2.getMoneyGenerated(), 0.01);
      assertEquals("Empresa ,r$Te\n---Condutores \nnull,r$Te\n\n---Ve\u00EDculos \nnull\nN\u00FAmero de viagens : 0\nDinheiro gerado : 0.0\n", string3);
      assertNotNull(string3);
      
      int int2 = company0.getTotalTrips();
      assertNotSame(company0, company2);
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company2));
      assertFalse(company0.equals((Object)company1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(",r$Te", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(",r$Te", company0.getName());
      assertEquals(0, company0.getPoints());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Company company0 = new Company("t<R>V8Z,", "umer.Company");
      assertEquals("t<R>V8Z,", company0.getName());
      assertEquals("umer.Company", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertNotNull(company0);
      
      Company company1 = new Company(company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals("t<R>V8Z,", company0.getName());
      assertEquals("umer.Company", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("umer.Company", company1.getPassword());
      assertEquals("t<R>V8Z,", company1.getName());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertNotNull(company1);
      
      HashMap<String, Driver> hashMap0 = company1.getDrivers();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("t<R>V8Z,", company0.getName());
      assertEquals("umer.Company", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("umer.Company", company1.getPassword());
      assertEquals("t<R>V8Z,", company1.getName());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ArrayList<Trip> arrayList0 = company0.getTrips();
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertEquals("t<R>V8Z,", company0.getName());
      assertEquals("umer.Company", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      Helicopter helicopter0 = new Helicopter("umer.Company", 0.0, point2D_Double0, "\nFila de espera : ");
      assertEquals("\nFila de espera : ", helicopter0.getOwner());
      assertTrue(helicopter0.isAvailable());
      assertEquals(0.0, helicopter0.getReliable(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals("umer.Company", helicopter0.getLicencePlate());
      assertNotNull(helicopter0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      Helicopter helicopter1 = new Helicopter(helicopter0);
      assertFalse(helicopter1.equals((Object)helicopter0));
      assertEquals("\nFila de espera : ", helicopter0.getOwner());
      assertTrue(helicopter0.isAvailable());
      assertEquals(0.0, helicopter0.getReliable(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals("umer.Company", helicopter0.getLicencePlate());
      assertEquals("\nFila de espera : ", helicopter1.getOwner());
      assertEquals(3, helicopter1.getSeats());
      assertEquals("umer.Company", helicopter1.getLicencePlate());
      assertEquals(110.0, helicopter1.getSpeed(), 0.01);
      assertTrue(helicopter1.isAvailable());
      assertEquals(8.5, helicopter1.getPrice(), 0.01);
      assertEquals(0.0, helicopter1.getReliable(), 0.01);
      assertNotNull(helicopter1);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      Helicopter helicopter2 = helicopter1.clone();
      assertNotSame(helicopter0, helicopter2);
      assertNotSame(helicopter0, helicopter1);
      assertNotSame(helicopter1, helicopter2);
      assertNotSame(helicopter1, helicopter0);
      assertNotSame(helicopter2, helicopter1);
      assertNotSame(helicopter2, helicopter0);
      assertFalse(helicopter0.equals((Object)helicopter1));
      assertFalse(helicopter1.equals((Object)helicopter0));
      assertFalse(helicopter2.equals((Object)helicopter1));
      assertFalse(helicopter2.equals((Object)helicopter0));
      assertEquals("\nFila de espera : ", helicopter0.getOwner());
      assertTrue(helicopter0.isAvailable());
      assertEquals(0.0, helicopter0.getReliable(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals("umer.Company", helicopter0.getLicencePlate());
      assertEquals("\nFila de espera : ", helicopter1.getOwner());
      assertEquals(3, helicopter1.getSeats());
      assertEquals("umer.Company", helicopter1.getLicencePlate());
      assertEquals(110.0, helicopter1.getSpeed(), 0.01);
      assertTrue(helicopter1.isAvailable());
      assertEquals(8.5, helicopter1.getPrice(), 0.01);
      assertEquals(0.0, helicopter1.getReliable(), 0.01);
      assertTrue(helicopter2.isAvailable());
      assertEquals(110.0, helicopter2.getSpeed(), 0.01);
      assertEquals(0.0, helicopter2.getReliable(), 0.01);
      assertEquals("\nFila de espera : ", helicopter2.getOwner());
      assertEquals(3, helicopter2.getSeats());
      assertEquals("umer.Company", helicopter2.getLicencePlate());
      assertEquals(8.5, helicopter2.getPrice(), 0.01);
      assertNotNull(helicopter2);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      int int0 = helicopter2.moneyGeneratedBetween((LocalDate) null, (LocalDate) null);
      assertNotSame(helicopter0, helicopter2);
      assertNotSame(helicopter0, helicopter1);
      assertNotSame(helicopter1, helicopter2);
      assertNotSame(helicopter1, helicopter0);
      assertNotSame(helicopter2, helicopter1);
      assertNotSame(helicopter2, helicopter0);
      assertFalse(helicopter0.equals((Object)helicopter2));
      assertFalse(helicopter0.equals((Object)helicopter1));
      assertFalse(helicopter1.equals((Object)helicopter2));
      assertFalse(helicopter1.equals((Object)helicopter0));
      assertFalse(helicopter2.equals((Object)helicopter1));
      assertFalse(helicopter2.equals((Object)helicopter0));
      assertEquals("\nFila de espera : ", helicopter0.getOwner());
      assertTrue(helicopter0.isAvailable());
      assertEquals(0.0, helicopter0.getReliable(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals("umer.Company", helicopter0.getLicencePlate());
      assertEquals("\nFila de espera : ", helicopter1.getOwner());
      assertEquals(3, helicopter1.getSeats());
      assertEquals("umer.Company", helicopter1.getLicencePlate());
      assertEquals(110.0, helicopter1.getSpeed(), 0.01);
      assertTrue(helicopter1.isAvailable());
      assertEquals(8.5, helicopter1.getPrice(), 0.01);
      assertEquals(0.0, helicopter1.getReliable(), 0.01);
      assertTrue(helicopter2.isAvailable());
      assertEquals(110.0, helicopter2.getSpeed(), 0.01);
      assertEquals(0.0, helicopter2.getReliable(), 0.01);
      assertEquals("\nFila de espera : ", helicopter2.getOwner());
      assertEquals(3, helicopter2.getSeats());
      assertEquals("umer.Company", helicopter2.getLicencePlate());
      assertEquals(8.5, helicopter2.getPrice(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      company1.addVehicle(helicopter2);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertNotSame(helicopter0, helicopter2);
      assertNotSame(helicopter0, helicopter1);
      assertNotSame(helicopter1, helicopter2);
      assertNotSame(helicopter1, helicopter0);
      assertNotSame(helicopter2, helicopter1);
      assertNotSame(helicopter2, helicopter0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertFalse(helicopter0.equals((Object)helicopter2));
      assertFalse(helicopter0.equals((Object)helicopter1));
      assertFalse(helicopter1.equals((Object)helicopter2));
      assertFalse(helicopter1.equals((Object)helicopter0));
      assertFalse(helicopter2.equals((Object)helicopter1));
      assertFalse(helicopter2.equals((Object)helicopter0));
      assertEquals("t<R>V8Z,", company0.getName());
      assertEquals("umer.Company", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("umer.Company", company1.getPassword());
      assertEquals("t<R>V8Z,", company1.getName());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("\nFila de espera : ", helicopter0.getOwner());
      assertTrue(helicopter0.isAvailable());
      assertEquals(0.0, helicopter0.getReliable(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals("umer.Company", helicopter0.getLicencePlate());
      assertEquals("\nFila de espera : ", helicopter1.getOwner());
      assertEquals(3, helicopter1.getSeats());
      assertEquals("umer.Company", helicopter1.getLicencePlate());
      assertEquals(110.0, helicopter1.getSpeed(), 0.01);
      assertTrue(helicopter1.isAvailable());
      assertEquals(8.5, helicopter1.getPrice(), 0.01);
      assertEquals(0.0, helicopter1.getReliable(), 0.01);
      assertTrue(helicopter2.isAvailable());
      assertEquals(110.0, helicopter2.getSpeed(), 0.01);
      assertEquals(0.0, helicopter2.getReliable(), 0.01);
      assertEquals("\nFila de espera : ", helicopter2.getOwner());
      assertEquals(3, helicopter2.getSeats());
      assertEquals("umer.Company", helicopter2.getLicencePlate());
      assertEquals(8.5, helicopter2.getPrice(), 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      helicopter0.setReliable(0.0);
      assertNotSame(helicopter0, helicopter2);
      assertNotSame(helicopter0, helicopter1);
      assertFalse(helicopter0.equals((Object)helicopter2));
      assertFalse(helicopter0.equals((Object)helicopter1));
      assertEquals("\nFila de espera : ", helicopter0.getOwner());
      assertTrue(helicopter0.isAvailable());
      assertEquals(0.0, helicopter0.getReliable(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals("umer.Company", helicopter0.getLicencePlate());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      int int1 = company1.moneyGeneratedBetween((LocalDate) null, (LocalDate) null);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertTrue(int1 == int0);
      assertEquals("t<R>V8Z,", company0.getName());
      assertEquals("umer.Company", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("umer.Company", company1.getPassword());
      assertEquals("t<R>V8Z,", company1.getName());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, int1);
      
      String string0 = company0.pickDriver();
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertEquals("t<R>V8Z,", company0.getName());
      assertEquals("umer.Company", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertNull(string0);
      
      int int2 = helicopter1.moneyGeneratedBetween((LocalDate) null, (LocalDate) null);
      assertNotSame(helicopter0, helicopter2);
      assertNotSame(helicopter0, helicopter1);
      assertNotSame(helicopter1, helicopter2);
      assertNotSame(helicopter1, helicopter0);
      assertFalse(helicopter0.equals((Object)helicopter2));
      assertFalse(helicopter0.equals((Object)helicopter1));
      assertFalse(helicopter1.equals((Object)helicopter2));
      assertFalse(helicopter1.equals((Object)helicopter0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals("\nFila de espera : ", helicopter0.getOwner());
      assertTrue(helicopter0.isAvailable());
      assertEquals(0.0, helicopter0.getReliable(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals("umer.Company", helicopter0.getLicencePlate());
      assertEquals("\nFila de espera : ", helicopter1.getOwner());
      assertEquals(3, helicopter1.getSeats());
      assertEquals("umer.Company", helicopter1.getLicencePlate());
      assertEquals(110.0, helicopter1.getSpeed(), 0.01);
      assertTrue(helicopter1.isAvailable());
      assertEquals(8.5, helicopter1.getPrice(), 0.01);
      assertEquals(0.0, helicopter1.getReliable(), 0.01);
      assertEquals(0, int2);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      boolean boolean0 = company1.availiableTaxis();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("t<R>V8Z,", company0.getName());
      assertEquals("umer.Company", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("umer.Company", company1.getPassword());
      assertEquals("t<R>V8Z,", company1.getName());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertFalse(boolean0);
      
      ArrayList<Trip> arrayList1 = company0.getTrips();
      assertNotSame(company0, company1);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(company0.equals((Object)company1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals("t<R>V8Z,", company0.getName());
      assertEquals("umer.Company", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      String string1 = company1.toString();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("t<R>V8Z,", company0.getName());
      assertEquals("umer.Company", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("umer.Company", company1.getPassword());
      assertEquals("t<R>V8Z,", company1.getName());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("Empresa t<R>V8Z,\n---Condutores \nnull\n---Ve\u00EDculos \nnullCompany\n\nN\u00FAmero de viagens : 0\nDinheiro gerado : 0.0\n", string1);
      assertNotNull(string1);
      
      String string2 = company0.pickDriver();
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertEquals("t<R>V8Z,", company0.getName());
      assertEquals("umer.Company", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertNull(string2);
      
      String string3 = company1.pickVehicle(point2D_Double0);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("t<R>V8Z,", company0.getName());
      assertEquals("umer.Company", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("umer.Company", company1.getPassword());
      assertEquals("t<R>V8Z,", company1.getName());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("umer.Company", string3);
      assertNotNull(string3);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      HashMap<String, Driver> hashMap1 = company1.getDrivers();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("t<R>V8Z,", company0.getName());
      assertEquals("umer.Company", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertEquals("umer.Company", company1.getPassword());
      assertEquals("t<R>V8Z,", company1.getName());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      String string4 = company0.pickDriver();
      assertNotSame(company0, company1);
      assertFalse(company0.equals((Object)company1));
      assertEquals("t<R>V8Z,", company0.getName());
      assertEquals("umer.Company", company0.getPassword());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(0, company0.getPoints());
      assertEquals(0, company0.getTotalTrips());
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Company company0 = new Company("kR<umvj r?(r", "kR<umvj r?(r");
      assertEquals(0, company0.getTotalTrips());
      assertEquals("kR<umvj r?(r", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals("kR<umvj r?(r", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertNotNull(company0);
      
      Company company1 = new Company(company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals("kR<umvj r?(r", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals("kR<umvj r?(r", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("kR<umvj r?(r", company1.getName());
      assertEquals("kR<umvj r?(r", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertNotNull(company1);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      Van van0 = new Van("", (-1805.186), point2D_Double0, "");
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals("", van0.getLicencePlate());
      assertEquals("", van0.getOwner());
      assertEquals((-1805.186), van0.getReliable(), 0.01);
      assertTrue(van0.isAvailable());
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(9, van0.getSeats());
      assertNotNull(van0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      Van van1 = new Van(van0);
      assertFalse(van1.equals((Object)van0));
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals("", van0.getLicencePlate());
      assertEquals("", van0.getOwner());
      assertEquals((-1805.186), van0.getReliable(), 0.01);
      assertTrue(van0.isAvailable());
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(1.9, van1.getPrice(), 0.01);
      assertTrue(van1.isAvailable());
      assertEquals("", van1.getLicencePlate());
      assertEquals(9, van1.getSeats());
      assertEquals(55.0, van1.getSpeed(), 0.01);
      assertEquals((-1805.186), van1.getReliable(), 0.01);
      assertEquals("", van1.getOwner());
      assertNotNull(van1);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      company0.addVehicle(van1);
      assertNotSame(company0, company1);
      assertNotSame(van0, van1);
      assertNotSame(van1, van0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(van0.equals((Object)van1));
      assertFalse(van1.equals((Object)van0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals("kR<umvj r?(r", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals("kR<umvj r?(r", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals("", van0.getLicencePlate());
      assertEquals("", van0.getOwner());
      assertEquals((-1805.186), van0.getReliable(), 0.01);
      assertTrue(van0.isAvailable());
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(1.9, van1.getPrice(), 0.01);
      assertTrue(van1.isAvailable());
      assertEquals("", van1.getLicencePlate());
      assertEquals(9, van1.getSeats());
      assertEquals(55.0, van1.getSpeed(), 0.01);
      assertEquals((-1805.186), van1.getReliable(), 0.01);
      assertEquals("", van1.getOwner());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      boolean boolean0 = company0.equals(company1);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0, company0.getTotalTrips());
      assertEquals("kR<umvj r?(r", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals("kR<umvj r?(r", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("kR<umvj r?(r", company1.getName());
      assertEquals("kR<umvj r?(r", company1.getPassword());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertTrue(boolean0);
      
      Company company2 = company0.clone();
      assertNotSame(company0, company1);
      assertNotSame(company0, company2);
      assertNotSame(company2, company0);
      assertNotSame(company2, company1);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company2.equals((Object)company0));
      assertFalse(company2.equals((Object)company1));
      assertEquals(0, company0.getTotalTrips());
      assertEquals("kR<umvj r?(r", company0.getPassword());
      assertEquals(0, company0.getPoints());
      assertEquals("kR<umvj r?(r", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("kR<umvj r?(r", company2.getName());
      assertEquals("kR<umvj r?(r", company2.getPassword());
      assertEquals(0, company2.getTotalTrips());
      assertEquals(0.0, company2.getMoneyGenerated(), 0.01);
      assertEquals(0, company2.getPoints());
      assertNotNull(company2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Company company0 = new Company("", "");
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertNotNull(company0);
      
      Company company1 = new Company(company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0, company1.getPoints());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("", company1.getName());
      assertEquals("", company1.getPassword());
      assertNotNull(company1);
      
      Trip trip0 = new Trip();
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(trip0);
      
      LocalDate localDate0 = trip0.getDate();
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(localDate0);
      
      Point2D.Double point2D_Double0 = trip0.getEnd();
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      LocalDate localDate1 = trip0.getDate();
      assertNotSame(localDate1, localDate0);
      assertTrue(localDate1.equals((Object)localDate0));
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNotNull(localDate1);
      
      company1.addTrip(trip0);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company1.getPoints());
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("", company1.getName());
      assertEquals("", company1.getPassword());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      
      String string0 = company1.pickDriver();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company1.getPoints());
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("", company1.getName());
      assertEquals("", company1.getPassword());
      assertNull(string0);
      
      String string1 = company1.toString();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company1.getPoints());
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("", company1.getName());
      assertEquals("", company1.getPassword());
      assertEquals("Empresa \n---Condutores \nnull\n---Ve\u00EDculos \nnull\nN\u00FAmero de viagens : 1\nDinheiro gerado : 0.0\n", string1);
      assertNotNull(string1);
      
      boolean boolean0 = company1.availiableTaxis();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company1.getPoints());
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("", company1.getName());
      assertEquals("", company1.getPassword());
      assertFalse(boolean0);
      
      Point2D.Double point2D_Double1 = new Point2D.Double();
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertNotNull(point2D_Double1);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      
      Point2D.Double point2D_Double2 = (Point2D.Double)point2D_Double1.clone();
      assertNotSame(point2D_Double1, point2D_Double2);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(point2D_Double2, point2D_Double1);
      assertNotSame(point2D_Double2, point2D_Double0);
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertTrue(point2D_Double2.equals((Object)point2D_Double0));
      assertTrue(point2D_Double2.equals((Object)point2D_Double1));
      assertNotNull(point2D_Double2);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double2.y, 0.01);
      assertEquals(0.0, point2D_Double2.x, 0.01);
      
      int int0 = company1.moneyGeneratedBetween(localDate0, localDate0);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertNotSame(localDate0, localDate1);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertTrue(localDate0.equals((Object)localDate1));
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals(0, company1.getPoints());
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals("", company1.getName());
      assertEquals("", company1.getPassword());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0, int0);
      
      String string2 = company0.pickVehicle(point2D_Double1);
      assertNotSame(company0, company1);
      assertNotSame(point2D_Double1, point2D_Double2);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertFalse(company0.equals((Object)company1));
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertTrue(point2D_Double1.equals((Object)point2D_Double2));
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals("", company0.getName());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertNull(string2);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      
      // Undeclared exception!
      try { 
        company1.getTrips();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Company company0 = new Company("", "");
      assertEquals("", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertNotNull(company0);
      
      Company company1 = new Company(company0);
      assertFalse(company1.equals((Object)company0));
      assertEquals("", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("", company1.getPassword());
      assertEquals("", company1.getName());
      assertEquals(0, company1.getPoints());
      assertEquals(0, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertNotNull(company1);
      
      Trip trip0 = new Trip();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertNotNull(trip0);
      
      LocalDate localDate0 = trip0.getDate();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertNotNull(localDate0);
      
      LocalDate localDate1 = trip0.getDate();
      assertNotSame(localDate1, localDate0);
      assertTrue(localDate1.equals((Object)localDate0));
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertNotNull(localDate1);
      
      company1.addTrip(trip0);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("", company1.getPassword());
      assertEquals("", company1.getName());
      assertEquals(0, company1.getPoints());
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      
      String string0 = company1.pickDriver();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("", company1.getPassword());
      assertEquals("", company1.getName());
      assertEquals(0, company1.getPoints());
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertNull(string0);
      
      boolean boolean0 = company1.availiableTaxis();
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertEquals("", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("", company1.getPassword());
      assertEquals("", company1.getName());
      assertEquals(0, company1.getPoints());
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertFalse(boolean0);
      
      int int0 = company1.moneyGeneratedBetween(localDate0, localDate0);
      assertNotSame(company0, company1);
      assertNotSame(company1, company0);
      assertNotSame(localDate0, localDate1);
      assertFalse(company0.equals((Object)company1));
      assertFalse(company1.equals((Object)company0));
      assertTrue(localDate0.equals((Object)localDate1));
      assertEquals("", company0.getName());
      assertEquals(0.0, company0.getMoneyGenerated(), 0.01);
      assertEquals("", company0.getPassword());
      assertEquals(0, company0.getTotalTrips());
      assertEquals(0, company0.getPoints());
      assertEquals("", company1.getPassword());
      assertEquals("", company1.getName());
      assertEquals(0, company1.getPoints());
      assertEquals(1, company1.getTotalTrips());
      assertEquals(0.0, company1.getMoneyGenerated(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        MockLocalDate.of((-620), (-620), (-620));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -620
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Company company0 = new Company("./s^=o K:~`A*dw", "./s^=o K:~`A*dw");
      Boolean boolean0 = Boolean.TRUE;
      Driver driver0 = mock(Driver.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, (Boolean) null).when(driver0).isAvailable();
      doReturn("./s^=o K:~`A*dw").when(driver0).getEmail();
      Trip trip0 = new Trip();
      Boolean.getBoolean("./s^=o K:~`A*dw");
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Trip trip1 = mock(Trip.class, new ViolatedAssumptionAnswer());
      doReturn(trip0).when(trip1).clone();
      doReturn(0.0).when(trip1).distance();
      doReturn(double0, double1).when(trip1).getPrice();
      company0.addTrip(trip1);
      Company company1 = company0.clone();
      company0.addDriver(driver0);
      company0.availiableTaxis();
      company1.getMoneyGenerated();
      Point2D.Double point2D_Double0 = trip0.getEnd();
      company0.pickVehicle(point2D_Double0);
      company1.getName();
      company1.getDrivers();
      System.setCurrentTimeMillis(1L);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(5636);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      company1.moneyGeneratedBetween(localDate0, localDate0);
      // Undeclared exception!
      try { 
        company0.pickDriver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umer.Company", e);
      }
  }
}
